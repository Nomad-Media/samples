import config from"./config/config.js";class NomadSDK{constructor(e){this.config=e,this.token=null,this.refreshTokenVal=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,this.debugMode=e.debugMode||!1}async _init(){await this.login(),this.__scheduleTokenRefresh()}async login(){_printDatetime("Logging in as "+this.config.username);try{var e=await _login(this.config.username,this.config.password,this.config.serviceApiUrl,this.debugMode);this.token=e.token,this.refreshTokenVal=e.refreshToken,this.expirationSeconds=Date.now()+1e3*e.expirationSeconds,this.userSessionId=e.userSessionId,this.id=e.id,_printDatetime("Login successful")}catch(e){throw _printDatetime("Login failed"),e}}async logout(){null===this.token&&await this._init(),_printDatetime("Logging out");try{await _logout(this.token,this.userSessionId,this.config.serviceApiUrl,this.debugMode),this.token=null,this.refreshTokenVal=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,_printDatetime("Logout successful")}catch(e){throw _printDatetime("Loggout failed"),e}}async refreshToken(){_printDatetime("Refreshing token");try{var e=await _refreshToken(this.refreshTokenVal,this.config.serviceApiUrl,this.debugMode);this.token=e.token,_printDatetime("Token refresh successful")}catch(e){throw _printDatetime("Token refresh failed"),e}}__scheduleTokenRefresh(){var e;this.token&&this.expirationSeconds&&0<(e=this.expirationSeconds-Date.now())&&(this.refreshTimer&&clearTimeout(this.refreshTimer),this.refreshTimer=setTimeout(async()=>{await this.refreshToken(),this.__scheduleTokenRefresh()},e-5e3))}async forgotPassword(){var t=this.config.username;_printDatetime("Sending code to "+t);try{await _forgotPassword(this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Code sent to "+t)}catch(e){throw _printDatetime("Code failed to send to "+t),e}}async resetPassword(e,t){var i=this.config.username;_printDatetime("Resetting password for "+i);try{await _resetPassword(this.config.serviceApiUrl,i,e,t,this.debugMode),_printDatetime("Password reset for "+i)}catch(e){throw _printDatetime("Password failed to reset for "+i),e}}async getAssetDetails(t){null===this.token&&await this._init(),_printDatetime("Getting asset details for "+t);try{var e=await _getAssetDetails(this.token,this.config.serviceApiUrl,t,this.config.apiType,this.debugMode);return _printDatetime("Asset details retrieved for "+t),e}catch(e){throw _printDatetime("Asset details failed to retrieve for "+t),e}}async uploadAsset(e,t,i,n,a,o,r,s,l){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Uploading asset "+e);let c=null;try{_printDatetime("Starting upload"),c=await _startUpload(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,this.debugMode),await _multiThreadUpload(this.token,this.config.serviceApiUrl,s,c,this.debugMode),await _completeUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode);var p=c.assetId;return _printDatetime("Upload successful"),p}catch(e){throw null!==c&&await _cancelUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode),_printDatetime("Upload failed"),e}}async createContent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating content");try{var i=await _createContent(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content created: "+i.contentId),i}catch(e){throw _printDatetime("Content failed to create"),e}}async deleteContent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting content: "+t);try{await _deleteContent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Content deleted: "+t)}catch(e){throw _printDatetime("Content failed to delete: "+t),e}}async getContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting content: "+t);try{var n=await _getContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Content retrieved: "+t),n}catch(e){throw _printDatetime("Content failed to retrieve: "+t),e}}async updateContent(t,e,i,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating content: "+t);try{var a=await _updateContent(this.token,this.config.serviceApiUrl,t,e,i,n,this.debugMode);return _printDatetime("Content updated: "+t),a}catch(e){throw _printDatetime("Content failed to update: "+t),e}}async addCustomProperties(t,e,i,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding custom properties to content: "+t);try{var a=await _addCustomProperties(this.token,this.config.serviceApiUrl,t,e,i,n,this.debugMode);return _printDatetime("Custom properties added to content: "+t),a}catch(e){throw _printDatetime("Custom properties failed to add to content: "+t),e}}async addRelatedContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding related content to content: "+t);try{var n=await _addRelatedContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Related content added to content: "+t),n.items[0]}catch(e){throw _printDatetime("Related content failed to add to content: "+t),e}}async addTagOrCollection(t,i,e,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Adding ${t} to content `+i);try{var r=await _addTagOrCollection(this.token,this.config.serviceApiUrl,t,i,e,n,a,o,this.debugMode);return _printDatetime(t+" added to content: "+i),r.items[0]}catch(e){throw _printDatetime(`Adding ${t} to content: ${i} failed`),e}}async createTagOrCollection(t,i){null===this.token&&await this._init(),_printDatetime(`Creating ${t}: `+i);try{var e=await _createTagOrCollection(this.token,this.config.serviceApiUrl,t,i,this.debugMode);return _printDatetime(t+" created: "+i),e}catch(e){throw _printDatetime(t+" failed to create: "+i),e}}async deleteRelatedContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting related content from content: "+t);try{var n=await _deleteRelatedContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Related content deleted from content: "+t),n.items[0]}catch(e){throw _printDatetime("Related content failed to delete from content: "+t),e}}async deleteTagOrCollection(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting tag or collection: "+t);try{var i=await _deleteTagOrCollection(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Tag or collection deleted: "+t),i}catch(e){throw _printDatetime("Tag or collection failed to delete: "+t),e}}async removeTagOrCollection(t,i,e,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Removing ${t} from content: `+i);try{var a=await _removeTagOrCollection(this.token,this.config.serviceApiUrl,t,i,e,n,this.debugMode);return _printDatetime(t+" removed from content: "+i),a.items[0]}catch(e){throw _printDatetime(t+" failed to remove from content: "+i),e}}async createAndUpdateEvent(e,t,i,n,a,o,r,s,l,c,p,d,h,u,f,g,w,y,v,m,_,T,E,D,S,O,C){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating/Updating event: "+i);try{var L=await _createAndUpdateEvent(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,c,p,d,h,u,f,g,w,y,v,m,_,T,E,D,S,O,C,this.debugMode);return _printDatetime("Event created/updated: "+L),L}catch(e){throw _printDatetime("Event failed to create/update: "+i),e}}async deleteEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting event: "+t);try{await _deleteEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Event deleted: "+t)}catch(e){throw _printDatetime("Event failed to delete: "+t),e}}async addLiveScheduleToEvent(t,e,i,n,a,o,r,s,l,c,p){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding Live Schedule to Event: "+t);try{await _addLiveScheduleToEvent(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,l,c,p,this.debugMode),_printDatetime("Live Schedule added to Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to add to Event: "+t),e}}async extendLiveSchedule(t,e,i,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Extending Live Schedule of Event: "+t);try{var a=_processDates(e,(await this.getContent(t,"412a30e3-73ee-4eae-b739-e1fc87601c7d")).properties.startDatetime);await _extendLiveSchedule(this.token,this.config.serviceApiUrl,t,a,i,n,this.debugMode),_printDatetime("Live Schedule extended of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to extend of Event: "+t),e}}async getLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Getting Live Schedule of Event: "+t);try{var e=await _getLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Schedule retrieved of Event: "+t),e}catch(e){throw _printDatetime("Live Schedule failed to retrieve of Event: "+t),e}}async startLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Starting Live Schedule of Event: "+t);try{await _startLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Schedule started of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to start of Event: "+t),e}}async stopLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Stopping Live Schedule of Event: "+t);try{await _stopLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Schedule stopped of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to stop of Event: "+t),e}}async createLiveChannel(e,t,i,n,a,o,r,s,l,c,p){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Channel: "+e);try{var d=await _createLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,c,p,this.debugMode);return _printDatetime("Live Channel created: "+d.id),d}catch(e){throw _printDatetime("Live Channel failed to create"),e}}async deleteLiveChannel(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Channel: "+t);try{await _deleteLiveChannel(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Live Channel deleted: "+t)}catch(e){throw _printDatetime("Live Channel failed to delete: "+t),e}}async getLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channel: "+t);try{var e=await _getLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Channel gotten: "+t),e}catch(e){throw _printDatetime("Live Channel failed to get: "+t),e}}async getLiveChannels(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channels");try{var e=await _getLiveChannels(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Channels gotten"),e}catch(e){throw _printDatetime("Live Channels failed to get"),e}}async startLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting Live Channel: "+t);try{await _startLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Channel started: "+t)}catch(e){throw _printDatetime("Live Channel failed to start: "+t),e}}async stopLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");this.debugMode&&console.log("Stopping Live Channel: "+t);try{await _stopLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Channel stopped: "+t)}catch(e){throw _printDatetime("Live Channel failed to stop: "+t),e}}async updateLiveChannel(e,t,i,n,a,o,r,s,l,c,p,d){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Channel: "+e);try{var h=await _updateLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,c,p,d,this.debugMode);return _printDatetime("Live Channel updated: "+e),h}catch(e){throw _printDatetime("Live Channel failed to update"),e}}async createLiveInput(e,t,i,n,a,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Input: "+e);try{var s=await _createLiveInput(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,this.debugMode);return _printDatetime("Live Input created: "+s.id),s}catch(e){throw _printDatetime("Live Input failed to create"),e}}async deleteLiveInput(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Input: "+t);try{await _deleteLiveInput(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Input deleted: "+t)}catch(e){throw _printDatetime("Live Input failed to delete: "+t),e}}async getLiveInput(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Input: "+t);try{var e=await _getLiveInput(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Input gotten: "+t),e}catch(e){throw _printDatetime("Live Input failed to get: "+t),e}}async getLiveInputs(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Inputs");try{var e=await _getLiveInputs(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Inputs gotten"),e}catch(e){throw _printDatetime("Live Inputs failed to get"),e}}async updateLiveInput(e,t,i,n,a,o,r,s){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Input: "+e);try{var l=await _updateLiveInput(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,this.debugMode);return _printDatetime("Live Input updated: "+e),l}catch(e){throw _printDatetime("Live Input failed to update"),e}}async cancelBroadcast(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling broadcast: "+t);try{await _cancelBroadcast(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Broadcast cancelled: "+t)}catch(e){throw _printDatetime("Broadcast failed to cancel: "+t),e}}async cancelSegment(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling segment: "+t);try{var e=await _cancelSegment(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Segment cancelled: "+t),e}catch(e){throw _printDatetime("Segment failed to cancel: "+t),e}}async completeSegment(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Completing segment: "+t);try{await _completeSegment(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode),_printDatetime("Segment completed: "+t)}catch(e){throw _printDatetime("Segment failed to complete: "+t),e}}async getCompletedSegments(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting completed segments");try{var t=await _getCompletedSegments(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Completed segments gotten"),t}catch(e){throw _printDatetime("Completed segments failed to get"),e}}async getLiveOperator(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operator: "+t);try{var e=await _getLiveOperator(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live operator gotten: "+t),e}catch(e){throw _printDatetime("Live operator failed to get: "+t),e}}async getLiveOperators(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operators");try{var e=await _getLiveOperators(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live operators gotten"),e}catch(e){throw _printDatetime("Live operators failed to get"),e}}async startBroadcast(e,t,i,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting broadcast");try{await _startBroadcast(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,this.debugMode),_printDatetime("Broadcast started")}catch(e){throw _printDatetime("Broadcast failed to start"),e}}async startSegment(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting segment: "+t);try{await _startSegment(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Segment started: "+t)}catch(e){throw _printDatetime("Segment failed to start: "+t),e}}async stopBroadcast(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Stopping broadcast");try{await _stopBroadcast(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Broadcast stopped")}catch(e){throw _printDatetime("Broadcast failed to stop"),e}}async addAssetScheduleEvent(e,t,i,n,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding asset schedule event: "+t.id);try{var o=await _addAssetScheduleEvent(this.token,this.config.serviceApiUrl,e,t,i,n,a,this.debugMode);return _printDatetime("Asset schedule event added: "+t.id),o}catch(e){throw _printDatetime("Asset schedule event failed to add: "+t.id),e}}async addInputScheduleEvent(e,t,i,n,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding input schedule event");try{var o=await _addInputScheduleEvent(this.token,this.config.serviceApiUrl,e,t,i,n,a,this.debugMode);return _printDatetime("Input schedule event added"),o}catch(e){throw _printDatetime("Input schedule event failed to add"),e}}async getAssetScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting asset schedule event: "+t);try{var i=await _getAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Asset schedule event gotten: "+t),i}catch(e){throw _printDatetime("Asset schedule event failed to get: "+t),e}}async getInputScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting asset schedule event: "+t);try{var i=await _getInputScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Asset schedule event gotten: "+t),i}catch(e){throw _printDatetime("Input schedule event failed to get: "+t),e}}async removeAssetScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing asset schedule event: "+t);try{await _removeAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Asset schedule event removed: "+t)}catch(e){throw _printDatetime("Asset schedule event failed to remove: "+t),e}}async removeInputScheduleEvent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing input schedule event");try{await _removeInputScheduleEvent(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Input schedule event removed")}catch(e){throw _printDatetime("Input schedule event failed to remove"),e}}async updateAssetScheduleEvent(e,t,i,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating asset schedule event: "+i.id);try{var r=await _updateAssetScheduleEvent(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,this.debugMode);return _printDatetime("Asset schedule event updated: "+i.id),r}catch(e){throw _printDatetime("Asset schedule event failed to update: "+i.id),e}}async updateInputScheduleEvent(e,t,i,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating input schedule event");try{var r=await _updateInputScheduleEvent(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,this.debugMode);return _printDatetime("Input schedule event updated"),r}catch(e){throw _printDatetime("Input schedule event failed to update"),e}}async register(t,e,i,n){_printDatetime("Registering user: "+t);try{var a=await _register(this.config.serviceApiUrl,t,e,i,n,this.debugMode);return _printDatetime("User registered: "+t),a}catch(e){throw _printDatetime("User failed to register: "+t),e}}async resendCode(t){_printDatetime("Resending code: "+t);try{await _resendCode(this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Code resent: "+t)}catch(e){throw _printDatetime("Code failed to resend: "+t),e}}async verify(t,e){_printDatetime("Verifying user: "+t);try{var i=await _verify(this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("User verified: "+t),i}catch(e){throw _printDatetime("User failed to verify: "+t),e}}async search(e,t,i,n,a,o,r,s,l,c){null===this.token&&await this._init(),_printDatetime("Searching...");try{var p=await _search(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,c,this.config.apiType,this.debugMode);return _printDatetime("Search complete"),!!p.hasItems&&p}catch(e){throw _printDatetime("Search failed"),e}}async changeEmail(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing email: "+t);try{await _changeEmail(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Email changed: "+t)}catch(e){throw _printDatetime("Email failed to change: "+t),e}}async changePassword(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing password");try{await _changePassword(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Password changed")}catch(e){throw _printDatetime("Password failed to change"),e}}async getUser(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting user");try{var e=await _getUser(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("User gotten"),e}catch(e){throw _printDatetime("User failed to get"),e}}async updateUser(e,t,i,n,a,o,r,s,l,c,p){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Updating user");try{var d=await _updateUser(this.token,this.config.serviceApiUrl,e,t,i,n,a,o,r,s,l,c,p,this.debugMode);return _printDatetime("User updated"),d}catch(e){throw _printDatetime("User failed to update"),e}}async addContentsToContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Adding content to content group: "+t);try{var i=await _addContentsToContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content added to content group: "+t),i}catch(e){throw _printDatetime("Content failed to add to content group: "+t),e}}async createContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating content group: "+t);try{var e=await _createContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group created: "+t),e}catch(e){throw _printDatetime("Content group failed to create: "+t),e}}async deleteContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Deleting content group: "+t);try{var e=await _deleteContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group deleted: "+t),e}catch(e){throw _printDatetime("Content group failed to delete: "+t),e}}async getContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content group: "+t);try{var e=await _getContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group gotten: "+t),e}catch(e){throw _printDatetime("Content group failed to get: "+t),e}}async getContentGroups(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content groups");try{var e=await _getContentGroups(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Content groups gotten"),e}catch(e){throw _printDatetime("Content groups failed to get"),e}}async getPortalGroups(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting portal groups");try{var t=await _getPortalGroups(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Portal groups gotten"),t}catch(e){throw _printDatetime("Portal groups failed to get"),e}}async removeContentsFromContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing content from content group: "+t);try{var i=await _removeContentsFromContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content removed from content group: "+t),i}catch(e){throw _printDatetime("Content failed to remove from content group: "+t),e}}async renameContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Renaming content group: "+t);try{var i=await _renameContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group renamed: "+t),i}catch(e){throw _printDatetime("Content group failed to rename: "+t),e}}async shareContentGroupWithUsers(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Sharing content group with users: "+t);try{var i=await _shareContentGroupWithUsers(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group shared with users: "+t),i}catch(e){throw _printDatetime("Content group failed to share with users: "+t),e}}async stopSharingContentGroupWithUsers(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Stopping sharing content group with users: "+t);try{var i=await _stopSharingContentGroupWithUsers(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group stopped sharing with users: "+t),i}catch(e){throw _printDatetime("Content group failed to stop sharing with users: "+t),e}}async createForm(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating form");try{var i=await _createForm(this.token,this.config.serviceApiUrl,e.FORM_INFO,this.debugMode);return _printDatetime("Form created"),i}catch(e){throw _printDatetime("Form failed to create"),e}}async mediaSearch(e,t,i,n,a){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Searching media...");try{var o=await _mediaSearch(this.token,this.config.serviceApiUrl,e,t,i,n,a,this.debugMode);return _printDatetime("Media search complete"),o}catch(e){throw _printDatetime("Media search failed"),e}}async guestInvite(t,e,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Inviting guest");try{var a=await _guestInvite(this.token,this.config.serviceApiUrl,t,e,this.id,i,n,this.debugMode);return _printDatetime("Guest invited"),a}catch(e){throw _printDatetime("Guest failed to invite: "+t),e}}async participantPanelQuery(){null===this.token&&await this._init(),_printDatetime("Querying participant panel");try{var e=await _participantPanelQuery(this.token,this.config.serviceApiUrl,this.config.apiType,this.id,this.debugMode);return _printDatetime("Participant panel queried"),e}catch(e){throw _printDatetime("Participant panel failed to query"),e}}async ping(){null===this.token&&await this._init(),_printDatetime("Pinging user");try{var e=await _ping(this.token,this.config.serviceApiUrl,this.userSessionId,this.debugMode);return _printDatetime("User pinged"),e}catch(e){throw _printDatetime("User failed to ping"),e}}async registerGuest(t,e,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Registering guest: "+t);try{var a=await _registerGuest(this.token,this.config.serviceApiUrl,t,e,i,n,this.debugMode);return _printDatetime("Guest registered: "+t),a}catch(e){throw _printDatetime("Guest failed to register: "+t),e}}async removeGuest(t,e,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing guest");try{var a=await _removeGuest(this.token,this.config.serviceApiUrl,t,e,this.id,i,n,this.debugMode);return _printDatetime("Guest removed"),a}catch(e){throw _printDatetime("Guest failed to remove: "+t),e}}async getVideoTracking(t,e,i){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting video tracking: "+t);try{await _getVideoTracking(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode),_printDatetime("Video tracking gotten: "+t)}catch(e){throw _printDatetime("Video tracking failed to get: "+t),e}}async miscFunctions(t,i,n,a){null===this.token&&await this._init();try{let e=this.config.serviceApiUrl+"/"+t;a&&(e=(e=(e=e.replace("/api","")).replace("app-api.","")).replace("admin-app",""));var o=new Headers,r=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+this.token),this.debugMode&&(console.log(`URL: ${e}
METHOD: `+i),n)&&console.log("BODY: "+JSON.stringify(n,null,4)),{method:i,headers:o}),s=(n&&(r.body=JSON.stringify(n)),await fetch(e,r));if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"API call failed")}}}export default new NomadSDK(config);async function _cancelUpload(e,t,i,n){t+=`/asset/upload/${i}/cancel`,i=new Headers;i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Cancel asset upload failed")}}const MAX_CONCURRENT_PROMISES=8;async function _multiThreadUpload(n,a,o,e,r){var t=e.parts;const s=t.length;for(let e=0;e<s;e+=MAX_CONCURRENT_PROMISES){var i=t.slice(e,e+MAX_CONCURRENT_PROMISES).map(async(e,t)=>{console.log(`Uploading part ${t+1} of ${s}...`);var i=await _uploadPart(o,e,r);await _uploadPartComplete(n,a,e.id,i,r),console.log(`Uploaded part ${t+1} of ${s} successfully`)});await Promise.all(i)}}async function _startUpload(e,t,i,n,a,o,r,s,l,c,p,d){t+="/asset/upload/start";let h=c.size/1e4;h<20971520&&(h=20971520);var u=new Headers,e=(u.append("Content-Type","application/json"),u.append("Authorization","Bearer "+e),{displayName:i||c.originalname,contentLength:c.size,uploadOverwriteOption:l,relativePath:c.originalname,parentId:p,chunkSize:h,relatedContentId:r,languageId:s,existingAssetId:n,relatedAssetId:a,createTranscribeRelatedAsset:o});d&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var f=await fetch(t,{method:"POST",headers:u,body:JSON.stringify(e)});if(f.ok)return await f.json();throw await f.json()}catch(e){_apiExceptionHandler(e,"Start Upload Failed")}}async function _completeUpload(e,t,i,n){t+=`/asset/upload/${i}/complete`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Complete Upload Failed")}}async function _uploadPartComplete(e,t,i,n,a){t+=`/asset/upload/part/${i}/complete`,i={etag:n},n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var o=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(i)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Upload Part Complete Failed")}}import{Buffer}from"buffer";async function _uploadPart(e,i,n,a=3){for(let t=0;t<a;t++)try{var o=Buffer.from(e.buffer,"binary").toString("binary").slice(i.startingPostion,i.endingPosition+1),r=new Headers,s=(r.append("Accept","application/json, text/plain, */*"),n&&console.log(`URL: ${i.url}
METHOD: POST`),await fetch(i.url,{method:"PUT",headers:r,body:o}));if(s.ok)return s.headers.get("ETag");throw await s.json()}catch(e){if(!(t<a-1)){_apiExceptionHandler(e,"Upload Part Failed");break}console.error(`Upload attempt ${t+1} failed. Retrying...`)}}async function _addCustomProperties(e,t,i,n,a,o,r){t=t+"/admin/asset/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={displayName:n,displayDate:a,customProperties:o};r&&console.log(`URL: ${t}
METHOD: PATCH
BODY: `+JSON.stringify(e));try{var s=await fetch(t,{method:"PATCH",headers:i,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Adding Custom Properties Failed")}}async function _addRelatedContent(e,t,i,n,a,o){var t=t+"/admin/related",r=new Headers,e=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+e),{items:[{contentDefinition:a,contentId:i,relatedContentId:n}]});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Adding Related Content Failed")}}async function _addTagOrCollection(e,t,i,n,a,o,r,s,l){var t=t+`/admin/${i}/content`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{items:[{contentDefinition:a,contentId:n,name:o,createNew:s}]});null!=r&&(e.items[0][i+"Id"]=r),l&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var p=await fetch(t,{method:"POST",headers:c,body:JSON.stringify(e)});if(p.ok)return await p.json();throw await p.json()}catch(e){_apiExceptionHandler(e,"Adding Tag or Collection Failed")}}async function _createTagOrCollection(e,t,i,n,a){t=t+"/admin/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={name:n};a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Adding Tag or Collection Failed")}}async function _deleteRelatedContent(e,t,i,n,a,o){var t=t+"/admin/related/delete",r=new Headers,e=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+e),{items:[{contentDefinition:a,contentId:i,relatedContentId:n}]});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Deleting Related Content Failed")}}async function _deleteTagOrCollection(e,t,i,n,a){t=t+`/admin/${i}/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Tag or Collection Failed")}}async function _removeTagOrCollection(e,t,i,n,a,o,r){var t=t+`/admin/${i}/content/delete`,s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{items:[{contentDefinition:a,contentId:n}]});e.items[0][i+"Id"]=o,r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Removing Tag or Collection Failed")}}async function _createContent(e,t,i,n,a){let o=t+"/content/new?contentDefinitionId="+i;t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),n&&(o+="&language="+n),a&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:t});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Create Content Failed")}}async function _deleteContent(e,t,i,n,a){t=t+`/content/${i}?contentDefinitionId=`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e);try{a&&console.log(`URL: ${t}
METHOD: DELETE`);var o=await fetch(t,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Content Failed")}}async function _getContent(e,t,i,n,a,o){let r=t+`/content/${i}?contentDefinitionId=`+n;a&&(r+="&isRevision="+a);t=new Headers;t.append("Authorization","Bearer "+e),t.append("Content-Type","application/json"),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:t});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Get Content Failed")}}import deepEqual from"deep-equal";async function _updateContent(e,t,i,n,a,o,r){var s=t+"/content/"+i,l=new Headers;l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e);let c=null;try{(c=await _getContent(e,t,i,n,null,r)).contentDefinitionId!==n&&(c.contentDefinitionId=n),c.contentId!==i&&(c.contentId=i),c.languageId!==o&&(c.languageId=o),_updateProperties(c,a)}catch(e){c={contentDefinitionId:n,contentId:i,languageId:o,properties:a}}r&&console.log(`URL: ${s}
METHOD: PUT
BODY: `+JSON.stringify(c,null,4));try{var p=await fetch(s,{method:"PUT",headers:l,body:JSON.stringify(c)});if(p.ok)return await p.json();throw await p.json()}catch(e){_apiExceptionHandler(e,"Update Content Failed")}}function _updateProperties(t,i){for(const n in i)if(Array.isArray(i[n]))for(let e=0;e<i[n].length;++e)deepEqual(t.properties[n][e],i[n][e])||(t.properties[n][e]=i[n][e]);else"object"==typeof i[n]?deepEqual(t.properties[n],i[n])||(t.properties[n]=i[n]):t.properties[n]!==i[n]&&(t.properties[n]=i[n])}async function _addLiveScheduleToEvent(e,t,i,n,a,o,r,s,l,c,p,d,h,u){var t=t+"/admin/liveSchedule",f=new Headers,e=(f.append("Content-Type","application/json"),f.append("Authorization","Bearer "+e),{contentId:i,slateVideo:null!==n?n:"",prerollVideo:null!==a?a:"",postrollVideo:null!==o?o:"",isSecureOutput:null!==r&&r,archiveFolderAsset:null!==s?s:"",primaryLiveInput:null!==l?l:"",backupLiveInputId:null!==c?c:"",primaryLivestreamInputUrl:null!==p?p:"",backupLivestreamInputUrl:null!==d?d:"",externalOutputProfiles:null!==h?h:""});u&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var g=await fetch(t,{method:"POST",headers:f,body:JSON.stringify(e)});if(!g.ok)throw await g.json()}catch(e){_apiExceptionHandler(e,"Adding Live Schedule to Event Failed")}}async function _createAndUpdateEvent(e,t,i,n,a,o,r,s,l,c,p,d,h,u,f,g,w,y,v,m,_,T,E,D,S,O,C,L,A,U){var k=new Headers;if(k.append("Content-Type","application/json"),k.append("Authorization","Bearer "+e),null===i){e=t+"/content/new?contentDefinitionId="+n;U&&console.log(`URL: ${e}
METHOD: GET`);try{var I=await fetch(e,{method:"GET",headers:k});if(!I.ok)throw await I.json();i=(await I.json()).contentId}catch(e){_apiExceptionHandler(e,"Get Content ID Failed")}}e=t+"/content/"+i,I={contentId:i,contentDefinitionId:n,properties:{contentRatings:null!==C?C:"",disabled:null!==L&&L,endDatetime:s,externalUrl:null!==g?g:"",featuredGroups:null!==E?E:[],genres:null!==v?v:[],groupSequence:null!==D?D:"",heroImage:null!==h?h:"",intelligentProgram:null!==f?f:"",languages:null!==_?_:[],liveChannel:null!==A?A:"",logoImage:null!==u?u:"",longDescription:null!==p?p:"",mediaAttributes:null!==m?m:[],name:a,performers:null!==y?y:[],primaryPerformer:null!==l?l:"",products:null!==T?T:[],recommendationSimilarItems:null!==O?O:[],relatedMediaItems:null!==S?S:[],routeName:_slugify(a),series:null!==o?o:"",shortDescription:null!==c?c:"",startDatetime:r,thumbnailImage:null!==d?d:"",venue:null!==w?w:""}};U&&console.log(`URL: ${e}
METHOD: PUT
BODY: `+JSON.stringify(I,null,4));try{var H=await fetch(e,{method:"PUT",headers:k,body:JSON.stringify(I)});if(H.ok)return await H.json();throw await H.json()}catch(e){_apiExceptionHandler(e,"Create and Update Event Instance Failed")}}async function _deleteEvent(e,t,i,n,a){t=t+`/content/${i}?contentDefinitionId=`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Event Failed")}}async function _extendLiveSchedule(e,t,i,n,a,o,r){t+=`/admin/liveSchedule/content/${i}/copy`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={endDate:null!==o?o:"",recurringDays:n,recurringWeeks:a,timeZoneOffsetSeconds:-60*(new Date).getTimezoneOffset()};r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Extending Live Schedule Failed")}}import{expect}from"chai";async function _getLiveSchedule(e,t,i,n){t=t+"/admin/liveSchedule/content/"+i,i=new Headers;i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(!a.ok)throw await a.json();try{return await a.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Live Schedule Failed")}}const Lookup=(e,t)=>({key:e,value:t}),DAY_OF_WEEK={Sunday:Lookup("7","3fc3b5ec-88be-41c9-be8f-5199735f3603"),Monday:Lookup("1","16bebfa8-65cc-451e-9744-d09d6c761e4a"),Tuesday:Lookup("2","02782764-f644-43fa-89cb-40cd3a3c3ece"),Wednesday:Lookup("3","1ca7cf91-5460-479f-84e5-e02cd51ca3f9"),Thursday:Lookup("4","2691d391-e1b1-43b6-97e2-5fc6b39479ef"),Friday:Lookup("5","b1897795-37a3-4a6e-a702-93643fe2ecab"),Saturday:Lookup("6","cf4c7688-417f-48d4-8b9d-fc6e6132d34e")};function _processDates(t,i){var n=[];for(let e=0;e<t.length;++e){const o=t[e];var a={description:o,id:DAY_OF_WEEK[o].value,properties:{abbreviation:o.substr(0,3),name:o,sortOrder:DAY_OF_WEEK[o].key}};n.push(a)}const o=new Date;let r=1,s=DAY_OF_WEEK[t[0]].key-o.getDay();for(;s<0;){var e=DAY_OF_WEEK[t[r]].key-o.getDay();(0<e||1<=(new Date(i).getTime()-o.getTime())/36e5)&&(s=e),++r}for(let e=r;e<t.length;++e){var l=DAY_OF_WEEK[t[e]].key-o.getDay();l<s&&((new Date(i).getTime()-o.getTime())/36e5<1||(s=l))}return o.setDate(o.getDate()+s),n}async function _startLiveSchedule(e,t,i,n){t+=`/admin/liveSchedule/content/${i}/start`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Start Live Schedule Failed")}}async function _stopLiveSchedule(e,t,i,n){t+=`/admin/liveSchedule/content/${i}/stop`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Stop Live Schedule Failed")}}async function _createLiveChannel(e,t,i,n,a,o,r,s,l,c,p,d,h,u){var f=t+"/liveChannel",g=new Headers,i=(g.append("Content-Type","application/json"),g.append("Authorization","Bearer "+e),{name:i,routeName:_slugify(i),enableHighAvailability:o,enableLiveClipping:r,externalOutputProfiles:d,isSecureOutput:s,outputScreenshots:l,type:{id:_LIVE_CHANNEL_TYPES[c],descrption:c}});n&&(i.thumbnailImage={id:n}),a&&(i.archiveFolderAsset={id:a}),"External"===c&&(i.externalUrl=p),h&&(o=await _getSecurityGroups(e,t,u),i.securityGroups=o.filter(e=>h.includes(e.description)).map(e=>({description:e.description,id:e.id}))),u&&console.log(`URL: ${f}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var w,y=await fetch(f,{method:"POST",headers:g,body:JSON.stringify(i)});if(y.ok)return await _waitForLiveChannelStatus(e,t,(w=await y.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,u),w;throw await y.json()}catch(e){_apiExceptionHandler(e,"Create Live Channel Failed")}}async function _deleteLiveChannel(t,e,i,n,a){e=e+"/liveChannel/"+i;let o=null;o=!0===n?(a&&console.log("Getting Live Channel Inputs IDs..."),await _getLiveChannelInputsIds(t,i)):null;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: DELETE`);try{var r=await fetch(e,{method:"DELETE",headers:i});if(!r.ok)throw await r.json();if(n&&o&&0<o.length){a&&console.log("Deleting Live Channel Live Inputs...");for(let e=0;e<o.length;e++)await _deleteLiveInput(t,o[e])}}catch(e){_apiExceptionHandler(e,"Delete Live Channel Failed")}}async function _getLiveChannelInputsIds(e,t,i,n){const a=[];n&&console.log("Getting Live Channel Schedule Events...");e=await _getLiveChannelScheduleEvents(e,t,i,n);return e&&0<e.length&&e.forEach(e=>{e&&e.liveInput&&null!=e.liveInput&&e.liveInput.lookupId&&a.push(e.liveInput.lookupId)}),a}async function _getLiveChannelScheduleEvents(e,t,i,n){t+=`/liveChannel/${i}/liveScheduleEvent`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Channel Schedule Events Failed")}}async function _getLiveChannelStatusMessage(e,t,i,n){n&&console.log("Getting Live Channel...");e=await _getLiveChannel(e,t,i,n);return!!(e&&e.statusMessages&&0<e.statusMessages.length)&&e.statusMessages[0]}async function _getLiveChannelStatus(e,t,i,n){n&&console.log("Getting Live Channel...");e=await _getLiveChannel(e,t,i,n);return e?e.status.description:"Deleted"}async function _getLiveChannel(e,t,i,n){t=t+"/liveChannel/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Channel Failed")}}async function _getLiveChannels(e,t,i){var t=t+"/liveChannel",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Channels Failed")}}async function _getSecurityGroups(e,t,i){var t=t+"/lookup/22?lookupKey=99e8767a-00ba-4758-b9c2-e07b52c47016",n=new Headers;n.append("Authorization","Bearer "+e),n.append("Content-Type","application/json"),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return(await a.json()).items;throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Security Groups Failed")}}const _SECURITY_GROUPS={"Content Manager":"e81e25ba-b6ab-4676-980c-f51385008eb3",Everyone:"740ea96a-9c15-4c2e-ba1a-050ea893514b",Guest:"8354ce06-deeb-4da9-a190-af0eca8d9f56"},_LIVE_CHANNEL_STATUSES={CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Error:"Error",Idle:"Idle",New:"New",Pause:"Pause",Recovering:"Recovering",Running:"Running",Starting:"Starting",Stopping:"Stopping",Unmanaged:"Unmanaged",UpdateFailed:"Update Failed",Updating:"Updating"},_LIVE_CHANNEL_TYPES={External:"2bf01dd4-0a9c-4168-a61b-27e135732103",IVS:"2bf01dd4-0a9c-4168-a61b-27e135732102",Normal:"2bf01dd4-0a9c-4168-a61b-27e135732100",Realtime:"2bf01dd4-0a9c-4168-a61b-27e135732104"};async function _startLiveChannel(e,t,i,n){var a=t+`/liveChannel/${i}/start`,o=new Headers;o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(e,t,i,_LIVE_CHANNEL_STATUSES.Running,1200,20)}catch(e){_apiExceptionHandler(e,"Start Live Channel Failed")}}async function _stopLiveChannel(e,t,i,n){var a=t+`/liveChannel/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+e),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(e,t,i,_LIVE_CHANNEL_STATUSES.Idle,1200,20,n)}catch(e){_apiExceptionHandler(e,"Stop Live Channel Failed")}}async function _updateLiveChannel(e,t,i,n,a,o,r,s,l,c,p,d,h,u,f){var i=await _getLiveChannel(e,t,i,f),g=t+"/liveChannel",w=new Headers;w.append("Content-Type","application/json"),w.append("Authorization","Bearer "+e);n&&n!==i.name&&(i.name=n,i.routeName=_slugify(n)),a&&a!==i.thumbnailImage&&(i.thumbnailImage={id:a}),o&&o!==i.archiveFolderAsset.id&&(i.archiveFolderAsset={id:o}),r&&r!==i.enableHighAvailability&&(i.enableHighAvailability=r),s&&s!==i.enableLiveClipping&&(i.enableLiveClipping=s),l&&l!==i.isSecureOutput&&(i.isSecureOutput=l),c&&c!==i.outputScreenshots&&(i.outputScreenshots=c),p&&_LIVE_CHANNEL_STATUSES[p]!==i.type.id&&(i.type={id:_LIVE_CHANNEL_TYPES[p]}),h&&h!==i.externalOutputProfiles&&(i.externalOutputProfiles=h),"External"===p?d&&d!==i.externalUrl&&(i.externalUrl=d):d&&i.externalUrl&&delete i.externalUrl,u&&(n=(await _getSecurityGroups(e,t,f)).filter(e=>u.includes(e.description)).map(e=>({description:e.description,id:e.id})))!==i.securityGroups&&(i.securityGroups=n),f&&console.log(`URL: ${g}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var y,v=await fetch(g,{method:"PUT",headers:w,body:JSON.stringify(i)});if(v.ok)return await _waitForLiveChannelStatus(e,t,(y=await v.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,f),y;throw await v.json()}catch(e){_apiExceptionHandler(e,"Updating Live Channel Failed")}}async function _waitForLiveChannelStatus(e,t,i,n,a=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<a;){var c=await _getLiveChannelStatus(e,t,i,r);if(c===n)return void(r&&console.log(`Live Channel [${i}] transitioned to status [${n}]`));if(console.log(`Live Channel [${i}] current status is [${c}]`),"Error"===c)throw c=await _getLiveChannelStatusMessage(e,t,i,r),new Error(`Live Channel [${i}] is in [Error] status: `+c);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Channel [${i}] to transition to status [${n}]... [${Math.round(l)}/${a}]`),l>a)break;await _sleep(o)}throw new Error(`Waiting for Live Channel [${i}] to transition to status [${n}] timed out`)}async function _createLiveInput(e,t,i,n,a,o,r,s,l,c){var p=t+"/liveInput",d=new Headers,i=(d.append("Content-Type","application/json"),d.append("Authorization","Bearer "+e),{name:i,internalName:_slugify(i),type:{id:_LIVE_INPUT_TYPES[a],description:a}});"RTMP_PUSH"==a?n&&(i.sourceCidr=n):"RTMP_PULL"!==a&&"RTP_PUSH"!==a&&"URL_PULL"!==a||n&&(i.sources=[{url:n}]),o&&(i.isStandard=o),r&&(i.videoAsset={id:r}),s&&(i.destinations=s),l&&(i.sources=l),c&&console.log(`URL: ${p}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var h=await fetch(p,{method:"POST",headers:d,body:JSON.stringify(i)}),u=await h.json();if(h.ok)return await _waitForLiveInputStatus(e,t,u.id,_LIVE_INPUT_STATUSES.Detached,15,1,c),u;throw await h.json()}catch(e){_apiExceptionHandler(e,"Creating Live Input Failed")}}async function _deleteLiveInput(e,t,i,n){t=t+"/liveInput/"+i,i=new Headers;i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var a=await fetch(t,{method:"DELETE",headers:i});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Delete Live Input Failed")}}async function _getLiveInputStatusMessage(e,t,i,n){n&&console.log("Getting Live Input...");e=await _getLiveInput(e,t,i,n);return e&&e.statusMessage&&e.statusMessage?e.statusMessage:""}async function _getLiveInputStatus(e,t,i,n){n&&console.log("Getting Live Input...");e=await _getLiveInput(e,t,i,n);return e?e.status.description:"Deleted"}async function _getLiveInput(e,t,i,n){t=t+"/liveInput/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Input Failed")}}async function _getLiveInputs(e,t,i){var t=t+"/liveInput",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Inputs Failed")}}const _LIVE_INPUT_STATUSES={Attached:"Attached",Attaching:"Attaching",CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Detached:"Detached",Detaching:"Detaching",Error:"Error",Paused:"Paused",Updating:"Updating"},_LIVE_INPUT_TYPES={RTMP_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1254",RTMP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1253",RTP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1252",UDP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1251",URL_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1255"};async function _updateLiveInput(e,t,i,n,a,o,r,s,l,c,p){var i=await _getLiveInput(e,t,i,p),d=t+"/liveInput",h=new Headers;h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+e);n&&n!==i.name&&(i.name=n,i.internalName=_slugify(n)),o&&_LIVE_INPUT_TYPES[o]!==i.type.id&&(i.type={id:_LIVE_INPUT_TYPES[o]}),"RTMP_PUSH"==o?(a&&a!==i.sourceCidr&&(i.sourceCidr=a),i.sources&&delete i.sources):"RTMP_PULL"===o||"RTP_PUSH"===o||"URL_PULL"===o?(a&&a!==i.sources&&(i.sources=[{url:a}]),i.sourceCidr&&delete i.sourceCidr):(i.sourceCidr&&delete i.sourceCidr,i.sources&&delete i.sources),r&&r!==i.isStandard&&(i.isStandard=r),s&&s!==i.videoAsset.id&&(i.videoAsset={id:s}),l&&l!==i.destinations&&(i.destinations=l),c&&c!==i.SOURCES&&(i.sources=c),p&&console.log(`URL: ${d}
METHOD: PUT
BODY: `+JSON.stringify(i,null,4));try{var u,f=await fetch(d,{method:"PUT",headers:h,body:JSON.stringify(i)});if(f.ok)return await _waitForLiveInputStatus(e,t,(u=await f.json()).id,_LIVE_INPUT_STATUSES.Detached,15,1,p),u;throw await f.json()}catch(e){_apiExceptionHandler(e,"Updating Live Input Failed")}}async function _waitForLiveInputStatus(e,t,i,n,a=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<a;){var c=await _getLiveInputStatus(e,t,i,r);if(c===n)return void(r&&console.log(`Live Input ${i} transitioned to status `+n));if(console.log(`Live Input [${i}] is in status [${c}]`),"Error"===c)throw c=await _getLiveInputStatusMessage(e,i,r),new Error(`Live Input ${i} is in Error status: `+c);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Input [${i}] to transition to status [${n}]... [${Math.round(l)}/${a}]`),l>a)break;await _sleep(o)}throw new Error(`Waiting for Live Input [${i}] to transition to status [${n}] timed out`)}async function _cancelBroadcast(e,t,i,n){var a=t+`/admin/liveOperator/${i}/cancel`,o=new Headers;o.append("Authorization","Bearer "+e),o.append("Content-Type","application/json"),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(e,t,i,"Idle",1200,20)}catch(e){_apiExceptionHandler(e,"Cancel Broadcast Failed")}}async function _cancelSegment(e,t,i,n){t+=`/admin/liveOperator/${i}/cancelSegment`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Cancel Segment Failed")}}async function _completeSegment(e,t,i,n,a,o){var t=t+`/admin/liveOperator/${i}/completeSegment`,r=new Headers,e=(r.append("Authorization","Bearer "+e),r.append("Content-Type","application/json"),{liveOperatorId:i});n&&Array.isArray(n)&&0<n.length&&(e.relatedContent=n.map(e=>({id:e}))),a&&Array.isArray(a)&&0<a.length&&(e.tags=a.map(e=>({id:e}))),o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Complete Segment Failed")}}async function _getCompletedSegments(e,t,i,n){t+=`/admin/liveOperator/${i}/segments`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Completed Segments Failed")}}async function _getLiveOperator(e,t,i,n){t=t+"/admin/liveOperator/"+i,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Operator Failed")}}async function _getLiveOperators(e,t,i){var t=t+"/admin/liveOperator",n=new Headers;n.append("Authorization","Bearer "+e),n.append("Content-Type","application/json"),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Live Operators Failed")}}async function _startBroadcast(e,t,i,n,a,o,r,s,l){var c=t+"/admin/liveOperator/start",p=new Headers,d=(p.append("Authorization","Bearer "+e),p.append("Content-Type","application/json"),{id:i});n&&(d.prerollAsset={id:n}),a&&(d.postrollAsset={id:a}),o&&(d.liveInput={id:o}),r&&Array.isArray(r)&&0<r.length&&(d.relatedContent=r.map(e=>({id:e}))),s&&Array.isArray(s)&&0<s.length&&(d.tags=s.map(e=>({id:e}))),l&&console.log(`URL: ${c}
METHOD: POST
BODY: `+JSON.stringify(d,null,4));try{var h=await fetch(c,{method:"POST",headers:p,body:JSON.stringify(d)});if(!h.ok)throw await h.json();await _waitForLiveOperatorStatus(e,t,i,"Running",1200,20)}catch(e){_apiExceptionHandler(e,"Start Broadcast Failed")}}async function _startSegment(e,t,i,n){t+=`/admin/liveOperator/${i}/startSegment`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),n&&console.log(`URL: ${t}
METHOD: POST`);try{var a=await fetch(t,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Start Segment Failed")}}async function _stopBroadcast(e,t,i,n){var a=t+`/admin/liveOperator/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+e),o.append("Content-Type","application/json"),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(e,t,i,"Idle",1200,20)}catch(e){_apiExceptionHandler(e,"Stop Broadcast Failed")}}async function _waitForLiveOperatorStatus(e,t,i,n,a=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<a;){var c=(await _getLiveOperator(e,t,i,r)).liveChannelStatus.description;if(c===n)return void(r&&console.log(`Live Operator ${i} transitioned to status `+n));if(console.log(`Live Operator [${i}] is in status [${c}]`),"Error"===c)throw new Error(`Live Operator ${i} is broken`);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Operator [${i}] to transition to status [${n}]... [${Math.round(l)}/${a}]`),l>a)break;await _sleep(o)}throw new Error(`Waiting for Live Operator [${i}] to transition to status [${n}] timed out`)}async function _addAssetScheduleEvent(e,t,i,n,a,o,r,s){var t=t+`/LiveChannel/${i}/liveScheduleEvent`,l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{isLoop:a,channelId:i,durationTimeCode:o,previousId:r,type:{id:_eventType.videoAsset,description:"Video Asset"},asset:n});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return(await c.json()).changeList[0];throw await c.json()}catch(e){_apiExceptionHandler(e,"Adding Asset Schedule Event Failed")}}async function _addInputScheduleEvent(e,t,i,n,a,o,r,s){var t=t+`/LiveChannel/${i}/liveScheduleEvent`,l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{channelId:i,fixedOnAirTimeUtc:o,type:{id:_eventType.liveInput,description:"Live Input"},liveInput:n,previousId:r});a&&(e.liveInput2=a),s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return(await c.json()).changeList[0];throw await c.json()}catch(e){_apiExceptionHandler(e,"Adding Input Schedule Event Failed")}}const _eventType={liveInput:"eef7ef23-56dc-4f48-8c0e-1f4d52990405",videoAsset:"eef7ef23-56dc-4f48-8c0e-1f4d52990404"};async function _getAssetScheduleEvent(e,t,i,n,a){t=t+`/liveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(!o.ok)throw await o.json();try{return await o.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Asset Schedule Event Failed")}}async function _getInputScheduleEvent(e,t,i,n,a){t=t+`/liveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(!o.ok)throw await o.json();try{return await o.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Asset Schedule Event Failed")}}async function _removeAssetScheduleEvent(e,t,i,n,a){t=t+`/LiveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Remove Asset Schedule Event Failed")}}async function _removeInputScheduleEvent(e,t,i,n,a){t=t+`/liveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"delete",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Remove Input Schedule Event Failed")}}async function _updateAssetScheduleEvent(e,t,i,n,a,o,r,s){var l=await _getAssetScheduleEvent(e,t,n,i,s),t=t+`/LiveChannel/${n}/liveScheduleEvent`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{type:{id:_eventType.videoAsset,description:"Video Asset"}});e.id=i&&i!==l.id?i:l.id,e.isLoop=o&&o!==l.isLoop?o:l.isLoop,e.channelId=n&&n!==l.channelId?n:l.channelId,e.durationTimeCode=r&&r!==l.durationTimeCode?r:l.durationTimeCode,e.asset=a&&a!==l.asset?a:l.asset,s&&console.log(`URL: ${t}
METHOD: PUT
BODY: `+JSON.stringify(e,null,4));try{var p=await fetch(t,{method:"PUT",headers:c,body:JSON.stringify(e)});if(p.ok)return await p.json();throw await p.json()}catch(e){_apiExceptionHandler(e,"Updating Asset Schedule Event Failed")}}async function _updateInputScheduleEvent(e,t,i,n,a,o,r,s){var l=await _getInputScheduleEvent(e,t,n,i,s),t=t+`/LiveChannel/${n}/liveScheduleEvent`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{type:{id:_eventType.liveInput,description:"Live Input"}});e.id=i&&i!==l.id?i:l.id,e.channelId=n&&n!==l.channelId?n:l.channelId,e.fixedOnAirTimeUtc=r&&r!==l.fixedOnAirTimeUtc?r:l.fixedOnAirTimeUtc,e.liveInput=a&&a!==l.liveInput?a:l.liveInput,e.liveInput2=o&&o!==l.liveInput2?o:l.liveInput2,s&&console.log(`URL: ${t}
METHOD: PUT
BODY: `+JSON.stringify(e,null,4));try{var p=await fetch(t,{method:"PUT",headers:c,body:JSON.stringify(e)});if(p.ok)return await p.json();throw await p.json()}catch(e){_apiExceptionHandler(e,"Updating Input Schedule Event Failed")}}async function _register(e,t,i,n,a,o){var e=e+"/account/register",r=new Headers,i=(r.append("Content-Type","application/json"),{firstName:i,lastName:n,email:t,password:a});o&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var s=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(i)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Register user failed")}}async function _resendCode(e,t,i){var e=e+"/account/resend-code",n=new Headers,t=(n.append("Content-Type","application/json"),{userName:t});i&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var a=await fetch(e,{method:"POST",headers:n,body:JSON.stringify(t)});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Resend code failed")}}async function _verify(e,t,i,n){var e=e+"/account/verify",a=new Headers,t=(a.append("Content-Type","application/json"),{userName:t,token:i});n&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Verify user failed")}}async function _forgotPassword(e,t,i){var e=e+"/account/forgot-password",n=new Headers,t=(n.append("Content-Type","application/json"),{username:t});i&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var a=await fetch(e,{method:"POST",headers:n,body:JSON.stringify(t)}).catch(e=>{throw e});if(!a.ok)throw await a.json()}catch(e){_apiExceptionHandler(e,"Forgot Password Failed")}}async function _login(e,t,i,n){i+="/account/login",e={userName:e,password:t};n&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var a=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Login Failed")}}async function _logout(e,t,i,n){var i=i+"/account/logout",a=new Headers,e=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),{userSessionId:t});n&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(i,{method:"POST",headers:a,body:JSON.stringify(e)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Logout Failed")}}async function _refreshToken(e,t,i){var t=t+"/account/refresh-token",n=new Headers,e=(n.append("Content-Type","application/json"),{refreshToken:e});i&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var a=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(e)});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Refreshing Token Failed")}}async function _resetPassword(e,t,i,n,a){var e=e+"/account/reset-password",o=new Headers,t=(o.append("Content-Type","application/json"),{userName:t,TOKEN:i,newPassword:n});a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var r=await fetch(e,{method:"POST",headers:o,body:JSON.stringify(t)});if(!r.ok)throw await r.json()}catch(e){_apiExceptionHandler(e,"Reset Password Failed")}}async function _getAssetDetails(e,t,i,n,a){n="admin"===n?t+`/admin/asset/${i}/detail`:t+`/asset/${i}/detail`,t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),a&&console.log(`URL: ${n}
METHOD: GET`);try{var o=await fetch(n,{method:"GET",headers:t});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Get Asset Details Failed")}}async function _search(e,t,i,n,a,o,r,s,l,c,p,d,h,u){t+=`/${h}/search`,h=new Headers,h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+e),e={};i&&(e.query=i),e.pageOffset=n||0,e.pageSize=a||100,o&&(e.filters=o),r&&(e.sortFields=r),s&&(e.searchResultFields=s),l&&(e.similarAssetId=l),c&&(e.minScore=c),p&&(e.excludeTotalRecordCount=p),d&&(e.filterBinder=d),u&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var f=await fetch(t,{method:"POST",headers:h,body:JSON.stringify(e)});if(f.ok)return await f.json();throw await f.json()}catch(e){_apiExceptionHandler(e,"Search Failed")}}function _apiExceptionHandler(i,n){if(!i)throw new Error(n);if("string"==typeof i)throw new Error(n+": "+i);if(!i.errors)throw new Error(n+": "+i.message);if(Array.isArray(i.errors)){let t="";for(let e=0;e<i.errors.length;e++)t+=`${i.errors[e].code}: ${i.errors[e].field}: ${i.errors[e].message}\n`;throw new Error(n+": "+t)}if("object"==typeof i.errors){let e="";for(var t in i.errors)Object.prototype.hasOwnProperty.call(i.errors,t)&&(e+=`${t}: ${i.errors[t]}\n`);throw new Error(n+": "+e)}}import{getRandomValues}from"crypto";function _newGuid(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,e=>(e^getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16))}function _printDatetime(e){var t=(new Date).toLocaleTimeString();console.log(t+": "+e)}async function _sleep(t){if(t&&0!==t)return new Promise(e=>{setTimeout(()=>{e()},1e3*t)})}function _slugify(e){return e&&0!==e.trim().length?e.toString().normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase().trim().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-"):""}async function _changeEmail(e,t,i,n,a){var t=t+"/account/change-email",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{password:n,newEmail:i});a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(!r.ok)throw await r.json()}catch(e){_apiExceptionHandler(e,"Change email failed")}}async function _changePassword(e,t,i,n,a){var t=t+"/account/change-password",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{password:i,newPassword:n});a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(!r.ok)return await r.json()}catch(e){_apiExceptionHandler(e,"Change password failed")}}async function _getCountries(e,t,i){var t=t.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return(await a.json())[5].children;throw await a.json()}catch(e){_apiExceptionHandler(e,"Get countries failed")}}async function _getStates(e,t,i){var t=t.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return(await a.json())[6].children;throw await a.json()}catch(e){_apiExceptionHandler(e,"Get countries failed")}}async function _getUser(e,t,i){var t=t+"/account/user",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get user failed")}}async function _updateUser(e,t,i,n,a,o,r,s,l,c,p,d,h,u){var f,g=await _getUser(e,t,u),w=t+"/account/user",y=new Headers,v=(y.append("Content-Type","application/json"),y.append("Authorization","Bearer "+e),{}),m=(await _getCountries(e,t,u)).find(e=>e.label===o),_={address:i,address2:n,city:a,state:(await _getStates(e,t,u)).find(e=>e.label===h).label,country:m,firstName:r,lastName:s,phone:c,phoneExt:p,postalCode:d,organization:l};for(const E in _)null!==_[E]?v[E]=_[E]:null!=(f=g[E])&&(v[E]=f);u&&console.log(`URL: ${w}
METHOD: PUT
BODY: `+JSON.stringify(v,null,4));try{var T=await fetch(w,{method:"PUT",headers:y,body:JSON.stringify(v)});return T.ok||await T.json(),await T.json()}catch(e){_apiExceptionHandler(e,"Update user failed")}}async function _addContentsToContentGroup(e,t,i,n,a){t=t+"/contentgroup/add/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=n;a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Adding Contents to Content Group Failed")}}async function _createContentGroup(e,t,i,n){var t=t+"/contentGroup",a=new Headers,e=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),{});i&&(e.name=i),n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Creating Content Group Failed")}}async function _deleteContentGroup(e,t,i,n){t=t+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var a=await fetch(t,{method:"DELETE",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Delete Content Group Failed")}}async function _getContentGroup(e,t,i,n){t=t+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Content Group Failed")}}async function _getContentGroups(e,t,i){var t=t+"/contentgroup",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var a=await fetch(t,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(e){_apiExceptionHandler(e,"Get Content Groups Failed")}}async function _getPortalGroups(e,t,i,n){var t=t+"/portal/groups",a=new Headers,e=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),{returnedGroupNames:i});n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Getting Portal Groups Failed")}}async function _removeContentsFromContentGroup(e,t,i,n,a){t=t+"/contentgroup/remove/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=n;a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Removing Content From Content Group Failed")}}async function _renameContentGroup(e,t,i,n,a){t=t+"/contentgroup/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={Name:n};a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"PATCH",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Renaming Content Group Failed")}}async function _shareContentGroupWithUsers(e,t,i,n,a){t=t+"/contentgroup/share/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=n;a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Sharing Content Group With Users Failed")}}async function _stopSharingContentGroupWithUsers(e,t,i,n,a){t=t+"/contentgroup/stopshare/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=n;a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Stop Sharing Content Group With Users Failed")}}async function _guestInvite(e,t,i,n,a,o,r,s){var t=t+"/account/invite-user",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{contentId:i,contentDefinitionId:n,userId:a,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Guest Invite failed")}}async function _participantPanelQuery(e,t,i,n,a){let o="";o="admin"==i?t+"/admin/user-session/"+n:t+"/user-session/"+n;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:i});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Participant panel query failed")}}async function _ping(e,t,i,n){var t=t+"/account/ping",a=new Headers,e=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),{userId:n});i&&(e.applicationId=i);try{var o=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Ping user failed")}}async function _registerGuest(e,t,i,n,a,o,r){var t=t+"/account/register-guest",s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{email:i,firstName:n,lastName:a,password:o});r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Register guest failed")}}async function _removeGuest(e,t,i,n,a,o,r,s){var t=t+"/account/remove-user",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{contentId:i,contentDefinitionId:n,userId:a,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Remove guest failed")}}async function _createForm(e,t,i,n,a){t=t+"/media/form/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=n;a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)throw await o.json();return await o.json()}catch(e){_apiExceptionHandler(e,"Creating Form Failed")}}async function _mediaSearch(e,t,i,n,a,o,r,s){var t=t+"/media/search",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{searchQuery:i,ids:n,sortFields:a});e.pageOffset=o||0,e.pageSize=r||100,s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)throw await c.json();return await c.json()}catch(e){_apiExceptionHandler(e,"Media Search Failed")}}async function _getVideoTracking(e,t,i,n,a,o){let r=t+"/asset/tracking?assetId="+i;t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),n&&(r+="&trackingEvent="+n),a&&(r+="&second="+a),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:t});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Get Video Tracking Failed")}}