import config from"./config/config.js";class NomadSDK{constructor(t){this.config=t,this.token=null,this.refreshToken=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,this.debugMode=t.debugMode||!1}async _init(){await this.login(),this._scheduleTokenRefresh()}async login(){_printDatetime("Logging in as "+this.config.username);try{var t=await _login(this.config.username,this.config.password,this.config.serviceApiUrl,this.debugMode);this.token=t.token,this.refreshToken=t.refreshToken,this.expirationSeconds=Date.now()+1e3*t.expirationSeconds,this.userSessionId=t.userSessionId,this.id=t.id,_printDatetime("Login successful")}catch(t){throw _printDatetime("Login failed"),t}}async logout(){null===this.token&&await this._init(),_printDatetime("Logging out");try{await _logout(this.token,this.userSessionId,this.config.serviceApiUrl,this.debugMode),this.token=null,this.refreshToken=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,_printDatetime("Logout successful")}catch(t){throw _printDatetime("Loggout failed"),t}}async __refreshToken(){_printDatetime("Refreshing token");try{var t=await _refreshToken(this.refreshToken,this.config.serviceApiUrl,this.debugMode);this.token=t.token,_printDatetime("Token refresh successful")}catch(t){throw _printDatetime("Token refresh failed"),t}}_scheduleTokenRefresh(){var t;this.token&&this.expirationSeconds&&0<(t=this.expirationSeconds-Date.now())&&(this.refreshTimer&&clearTimeout(this.refreshTimer),this.refreshTimer=setTimeout(async()=>{await this.__refreshToken()},t-5e3))}async forgotPassword(e){null===this.token&&await this._init(),_printDatetime("Sending code to "+e);try{await _forgotPassword(this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Code sent to "+e)}catch(t){throw _printDatetime("Code failed to send to "+e),t}}async resetPassword(e,t,i){null===this.token&&await this._init(),_printDatetime("Resetting password for "+e);try{await _resetPassword(this.config.serviceApiUrl,e,t,i,this.debugMode),_printDatetime("Password reset for "+e)}catch(t){throw _printDatetime("Password failed to reset for "+e),t}}async uploadAsset(t,e,i,n,a,o,r,s,p){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Uploading asset "+t);let c=null;try{_printDatetime("Starting upload"),c=await _startUpload(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,p,this.debugMode),await _multiThreadUpload(this.token,this.config.serviceApiUrl,s,c,this.debugMode),await _completeUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode);var l=c.assetId;return _printDatetime("Upload successful"),l}catch(t){throw null!==c&&await _cancelUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode),_printDatetime("Upload failed"),t}}async createContent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating content");try{var i=await _createContent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content created: "+i.contentId),i}catch(t){throw _printDatetime("Content failed to create"),t}}async deleteContent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting content: "+e);try{await _deleteContent(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Content deleted: "+e)}catch(t){throw _printDatetime("Content failed to delete: "+e),t}}async getContent(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting content: "+e);try{var n=await _getContent(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Content retrieved: "+e),n}catch(t){throw _printDatetime("Content failed to retrieve: "+e),t}}async updateContent(e,t,i,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating content: "+e);try{var a=await _updateContent(this.token,this.config.serviceApiUrl,e,t,i,n,this.debugMode);return _printDatetime("Content updated: "+e),a}catch(t){throw _printDatetime("Content failed to update: "+e),t}}async addCustomProperties(e,t,i,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding custom properties to content: "+e);try{var a=await _addCustomProperties(this.token,this.config.serviceApiUrl,e,t,i,n,this.debugMode);return _printDatetime("Custom properties added to content: "+e),a}catch(t){throw _printDatetime("Custom properties failed to add to content: "+e),t}}async addRelatedContent(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding related content to content: "+e);try{var n=await _addRelatedContent(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Related content added to content: "+e),n.items[0]}catch(t){throw _printDatetime("Related content failed to add to content: "+e),t}}async addTagOrCollection(e,i,t,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Adding ${e} to content `+i);try{var r=await _addTagOrCollection(this.token,this.config.serviceApiUrl,e,i,t,n,a,o,this.debugMode);return _printDatetime(e+" added to content: "+i),r.items[0]}catch(t){throw _printDatetime(`Adding ${e} to content: ${i} failed`),t}}async deleteRelatedContent(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting related content from content: "+e);try{var n=await _deleteRelatedContent(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Related content deleted from content: "+e),n.items[0]}catch(t){throw _printDatetime("Related content failed to delete from content: "+e),t}}async deleteTagOrCollection(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting tag or collection: "+e);try{var i=await _deleteTagOrCollection(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Tag or collection deleted: "+e),i}catch(t){throw _printDatetime("Tag or collection failed to delete: "+e),t}}async removeTagOrCollection(e,i,t,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Removing ${e} from content: `+i);try{var a=await _removeTagOrCollection(this.token,this.config.serviceApiUrl,e,i,t,n,this.debugMode);return _printDatetime(e+" removed from content: "+i),a.items[0]}catch(t){throw _printDatetime(e+" failed to remove from content: "+i),t}}async createAndUpdateEventInstance(e,i,n,a,o,r,s,p,c,l,d,h,u,f,g,w,y,v,_,m,T,E,D,S,C){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating/Updating event instance: "+n);try{let t;t=a?_processDates(l,p):null;var O=await _createAndUpdateEventInstance(this.token,this.config.serviceApiUrl,e,i,n,a,o,r,s,p,c,t,d,h,u,f,g,w,y,v,_,m,T,E,D,S,C,this.debugMode);return _printDatetime("Event instance created/updated: "+O),O}catch(t){throw _printDatetime("Event instance failed to create/update"),t}}async deleteEventInstance(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting event instance: "+e);try{await _deleteEventInstance(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Event instance deleted: "+e)}catch(t){throw _printDatetime("Event instance failed to delete: "+e),t}}async createLiveChannel(t,e,i,n,a,o,r,s,p,c){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Channel: "+t);try{var l=await _createLiveChannel(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,p,c,this.debugMode);return _printDatetime("Live Channel created: "+l.id),l}catch(t){throw _printDatetime("Live Channel failed to create"),t}}async deleteLiveChannel(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Channel: "+e);try{await _deleteLiveChannel(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Live Channel deleted: "+e)}catch(t){throw _printDatetime("Live Channel failed to delete: "+e),t}}async getLiveChannel(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channel: "+e);try{var t=await _getLiveChannel(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Live Channel gotten: "+e),t}catch(t){throw _printDatetime("Live Channel failed to get: "+e),t}}async getLiveChannels(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channels");try{var t=await _getLiveChannels(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Channels gotten"),t}catch(t){throw _printDatetime("Live Channels failed to get"),t}}async startLiveChannel(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting Live Channel: "+e);try{await _startLiveChannel(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Live Channel started: "+e)}catch(t){throw _printDatetime("Live Channel failed to start: "+e),t}}async stopLiveChannel(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");this.debugMode&&console.log("Stopping Live Channel: "+e);try{await _stopLiveChannel(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Live Channel stopped: "+e)}catch(t){throw _printDatetime("Live Channel failed to stop: "+e),t}}async updateLiveChannel(t,e,i,n,a,o,r,s,p,c,l){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Channel: "+t);try{var d=await _updateLiveChannel(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,p,c,l,this.debugMode);return _printDatetime("Live Channel updated: "+t),d}catch(t){throw _printDatetime("Live Channel failed to update"),t}}async createLiveInput(t,e,i,n,a,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Input: "+t);try{var s=await _createLiveInput(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,this.debugMode);return _printDatetime("Live Input created: "+s.id),s}catch(t){throw _printDatetime("Live Input failed to create"),t}}async deleteLiveInput(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Input: "+e);try{await _deleteLiveInput(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Live Input deleted: "+e)}catch(t){throw _printDatetime("Live Input failed to delete: "+e),t}}async getLiveInput(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Input: "+e);try{var t=await _getLiveInput(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Live Input gotten: "+e),t}catch(t){throw _printDatetime("Live Input failed to get: "+e),t}}async getLiveInputs(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Inputs");try{var t=await _getLiveInputs(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Inputs gotten"),t}catch(t){throw _printDatetime("Live Inputs failed to get"),t}}async updateLiveInput(t,e,i,n,a,o,r,s){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Input: "+t);try{var p=await _updateLiveInput(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,this.debugMode);return _printDatetime("Live Input updated: "+t),p}catch(t){throw _printDatetime("Live Input failed to update"),t}}async cancelBroadcast(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling broadcast: "+e);try{await _cancelBroadcast(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Broadcast cancelled: "+e)}catch(t){throw _printDatetime("Broadcast failed to cancel: "+e),t}}async cancelSegment(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling segment: "+e);try{var t=await _cancelSegment(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Segment cancelled: "+e),t}catch(t){throw _printDatetime("Segment failed to cancel: "+e),t}}async completeSegment(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Completing segment: "+e);try{await _completeSegment(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode),_printDatetime("Segment completed: "+e)}catch(t){throw _printDatetime("Segment failed to complete: "+e),t}}async getCompletedSegments(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting completed segments");try{var e=await _getCompletedSegments(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Completed segments gotten"),e}catch(t){throw _printDatetime("Completed segments failed to get"),t}}async getLiveOperator(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operator: "+e);try{var t=await _getLiveOperator(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Live operator gotten: "+e),t}catch(t){throw _printDatetime("Live operator failed to get: "+e),t}}async getLiveOperators(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operators");try{var t=await _getLiveOperators(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live operators gotten"),t}catch(t){throw _printDatetime("Live operators failed to get"),t}}async startBroadcast(t,e,i,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting broadcast");try{await _startBroadcast(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,this.debugMode),_printDatetime("Broadcast started")}catch(t){throw _printDatetime("Broadcast failed to start"),t}}async startSegment(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting segment: "+e);try{await _startSegment(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Segment started: "+e)}catch(t){throw _printDatetime("Segment failed to start: "+e),t}}async stopBroadcast(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Stopping broadcast");try{await _stopBroadcast(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Broadcast stopped")}catch(t){throw _printDatetime("Broadcast failed to stop"),t}}async addAssetScheduleEvent(t,e,i,n,a,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding asset schedule event: "+e);try{var r=_newGuid(),s=await _addAssetScheduleEvent(this.token,this.config.serviceApiUrl,r,t,e,i,n,a,o,this.debugMode);return _printDatetime("Asset schedule event added: "+e),s}catch(t){throw _printDatetime("Asset schedule event failed to add: "+e),t}}async addInputScheduleEvent(t,e,i,n,a,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding input schedule event");try{var s=await _addInputScheduleEvent(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,this.debugMode);return _printDatetime("Input schedule event added"),s}catch(t){throw _printDatetime("Input schedule event failed to add"),t}}async removeAssetScheduleEvent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing asset schedule event: "+e);try{var i=await _removeAssetScheduleEvent(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Asset schedule event removed: "+e),i}catch(t){throw _printDatetime("Asset schedule event failed to remove: "+e),t}}async removeInputScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing input schedule event");try{var i=await _removeInputScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Input schedule event removed"),i}catch(t){throw _printDatetime("Input schedule event failed to remove"),t}}async register(e,t,i,n){_printDatetime("Registering user: "+e);try{var a=await _register(this.config.serviceApiUrl,e,t,i,n,this.debugMode);return _printDatetime("User registered: "+e),a}catch(t){throw _printDatetime("User failed to register: "+e),t}}async resendCode(e){_printDatetime("Resending code: "+e);try{await _resendCode(this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Code resent: "+e)}catch(t){throw _printDatetime("Code failed to resend: "+e),t}}async verify(e,t){_printDatetime("Verifying user: "+e);try{var i=await _verify(this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("User verified: "+e),i}catch(t){throw _printDatetime("User failed to verify: "+e),t}}async search(t,e,i,n,a,o,r,s,p,c){null===this.token&&await this._init(),_printDatetime("Searching...");try{var l=await _search(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,p,c,this.config.apiType,this.debugMode);return _printDatetime("Search complete"),!!l.hasItems&&l.items}catch(t){throw _printDatetime("Search failed"),t}}async changeEmail(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing email: "+e);try{await _changeEmail(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Email changed: "+e)}catch(t){throw _printDatetime("Email failed to change: "+e),t}}async changePassword(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing password");try{await _changePassword(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Password changed")}catch(t){throw _printDatetime("Password failed to change"),t}}async getUser(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting user");try{var t=await _getUser(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("User gotten"),t}catch(t){throw _printDatetime("User failed to get"),t}}async updateUser(t,e,i,n,a,o,r,s,p,c,l){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Updating user");try{var d=await _updateUser(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,r,s,p,c,l,this.debugMode);return _printDatetime("User updated"),d}catch(t){throw _printDatetime("User failed to update"),t}}async addContentsToContentGroup(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Adding content to content group: "+e);try{var i=await _addContentsToContentGroup(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content added to content group: "+e),i}catch(t){throw _printDatetime("Content failed to add to content group: "+e),t}}async createContentGroup(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating content group: "+e);try{var t=await _createContentGroup(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Content group created: "+e),t}catch(t){throw _printDatetime("Content group failed to create: "+e),t}}async deleteContentGroup(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Deleting content group: "+e);try{var t=await _deleteContentGroup(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Content group deleted: "+e),t}catch(t){throw _printDatetime("Content group failed to delete: "+e),t}}async getContentGroup(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content group: "+e);try{var t=await _getContentGroup(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Content group gotten: "+e),t}catch(t){throw _printDatetime("Content group failed to get: "+e),t}}async getContentGroups(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content groups");try{var t=await _getContentGroups(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Content groups gotten"),t}catch(t){throw _printDatetime("Content groups failed to get"),t}}async getPortalGroups(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting portal groups");try{var e=await _getPortalGroups(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Portal groups gotten"),e}catch(t){throw _printDatetime("Portal groups failed to get"),t}}async removeContentsFromContentGroup(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing content from content group: "+e);try{var i=await _removeContentsFromContentGroup(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content removed from content group: "+e),i}catch(t){throw _printDatetime("Content failed to remove from content group: "+e),t}}async renameContentGroup(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Renaming content group: "+e);try{var i=await _renameContentGroup(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content group renamed: "+e),i}catch(t){throw _printDatetime("Content group failed to rename: "+e),t}}async shareContentGroupWithUsers(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Sharing content group with users: "+e);try{var i=await _shareContentGroupWithUsers(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content group shared with users: "+e),i}catch(t){throw _printDatetime("Content group failed to share with users: "+e),t}}async stopSharingContentGroupWithUsers(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Stopping sharing content group with users: "+e);try{var i=await _stopSharingContentGroupWithUsers(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content group stopped sharing with users: "+e),i}catch(t){throw _printDatetime("Content group failed to stop sharing with users: "+e),t}}async createForm(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating form");try{var i=await _createForm(this.token,this.config.serviceApiUrl,t.FORM_INFO,this.debugMode);return _printDatetime("Form created"),i}catch(t){throw _printDatetime("Form failed to create"),t}}async mediaSearch(t,e,i,n,a,o){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Searching media...");try{var r=await _mediaSearch(this.token,this.config.serviceApiUrl,t,e,i,n,a,o,this.debugMode);return _printDatetime("Media search complete"),r}catch(t){throw _printDatetime("Media search failed"),t}}async guestInvite(e,t,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Inviting guest");try{var a=await _guestInvite(this.token,this.config.serviceApiUrl,e,t,this.id,i,n,this.debugMode);return _printDatetime("Guest invited"),a}catch(t){throw _printDatetime("Guest failed to invite: "+e),t}}async participantPanelQuery(){null===this.token&&await this._init(),_printDatetime("Querying participant panel");try{var t=await _participantPanelQuery(this.token,this.config.serviceApiUrl,this.config.apiType,this.id,this.debugMode);return _printDatetime("Participant panel queried"),t}catch(t){throw _printDatetime("Participant panel failed to query"),t}}async ping(){null===this.token&&await this._init(),_printDatetime("Pinging user");try{var t=await _ping(this.token,this.config.serviceApiUrl,this.userSessionId,this.debugMode);return _printDatetime("User pinged"),t}catch(t){throw _printDatetime("User failed to ping"),t}}async registerGuest(e,t,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Registering guest: "+e);try{var a=await _registerGuest(this.token,this.config.serviceApiUrl,e,t,i,n,this.debugMode);return _printDatetime("Guest registered: "+e),a}catch(t){throw _printDatetime("Guest failed to register: "+e),t}}async removeGuest(e,t,i,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing guest");try{var a=await _removeGuest(this.token,this.config.serviceApiUrl,e,t,this.id,i,n,this.debugMode);return _printDatetime("Guest removed"),a}catch(t){throw _printDatetime("Guest failed to remove: "+e),t}}async getVideoTracking(e,t,i){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting video tracking: "+e);try{var n=await _getVideoTracking(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Video tracking gotten: "+e),n}catch(t){throw _printDatetime("Video tracking failed to get: "+e),t}}}export default new NomadSDK(config);async function _cancelUpload(t,e,i,n){e+=`/asset/upload/${i}/cancel`,i=new Headers;i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: POST`);try{var a=await fetch(e,{method:"POST",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Cancel asset upload failed")}}const MAX_CONCURRENT_PROMISES=8;async function _multiThreadUpload(n,a,o,t,r){var e=t.parts;const s=e.length;for(let t=0;t<s;t+=MAX_CONCURRENT_PROMISES){var i=e.slice(t,t+MAX_CONCURRENT_PROMISES).map(async(t,e)=>{console.log(`Uploading part ${e+1} of ${s}...`);var i=await _uploadPart(o,t,r);await _uploadPartComplete(n,a,t.id,i,r),console.log(`Uploaded part ${e+1} of ${s} successfully`)});await Promise.all(i)}}async function _startUpload(t,e,i,n,a,o,r,s,p,c,l,d){e+="/asset/upload/start";let h=c.size/1e4;h<20971520&&(h=20971520);var u=new Headers,t=(u.append("Content-Type","application/json"),u.append("Authorization","Bearer "+t),{displayName:i||c.originalname,contentLength:c.size,uploadOverwriteOption:p,relativePath:c.originalname,parentId:l,chunkSize:h,relatedContentId:r,languageId:s,existingAssetId:n,relatedAssetId:a,createTranscribeRelatedAsset:o});d&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var f=await fetch(e,{method:"POST",headers:u,body:JSON.stringify(t)});if(f.ok)return await f.json();throw await f.json()}catch(t){_apiExceptionHandler(t,"Start Upload Failed")}}async function _completeUpload(t,e,i,n){e+=`/asset/upload/${i}/complete`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: POST`);try{var a=await fetch(e,{method:"POST",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Complete Upload Failed")}}async function _uploadPartComplete(t,e,i,n,a){e+=`/asset/upload/part/${i}/complete`,i={etag:n},n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var o=await fetch(e,{method:"POST",headers:n,body:JSON.stringify(i)});if(!o.ok)throw await o.json()}catch(t){_apiExceptionHandler(t,"Upload Part Complete Failed")}}import{Buffer}from"buffer";async function _uploadPart(t,i,n,a=3){for(let e=0;e<a;e++)try{var o=Buffer.from(t.buffer,"binary").toString("binary").slice(i.startingPostion,i.endingPosition+1),r=new Headers,s=(r.append("Accept","application/json, text/plain, */*"),n&&console.log(`URL: ${i.url}
METHOD: POST`),await fetch(i.url,{method:"PUT",headers:r,body:o}));if(s.ok)return s.headers.get("ETag");throw await s.json()}catch(t){if(!(e<a-1)){_apiExceptionHandler(t,"Upload Part Failed");break}console.error(`Upload attempt ${e+1} failed. Retrying...`)}}async function _addCustomProperties(t,e,i,n,a,o,r){e=e+"/admin/asset/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t={displayName:n,displayDate:a,customProperties:o};r&&console.log(`URL: ${e}
METHOD: PATCH
BODY: `+JSON.stringify(t));try{var s=await fetch(e,{method:"PATCH",headers:i,body:JSON.stringify(t)});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Adding Custom Properties Failed")}}async function _addRelatedContent(t,e,i,n,a,o){var e=e+"/admin/related",r=new Headers,t=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+t),{items:[{contentDefinition:a,contentId:i,relatedContentId:n}]});o&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var s=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(t)});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Adding Related Content Failed")}}async function _addTagOrCollection(t,e,i,n,a,o,r,s,p){var e=e+`/admin/${i}/content`,c=new Headers,t=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+t),{items:[{contentDefinition:a,contentId:n,name:o,createNew:s}]});null!=r&&(t.items[0][i+"Id"]=r),p&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var l=await fetch(e,{method:"POST",headers:c,body:JSON.stringify(t)});if(l.ok)return await l.json();throw await l.json()}catch(t){_apiExceptionHandler(t,"Adding Tag or Collection Failed")}}async function _deleteRelatedContent(t,e,i,n,a,o){var e=e+"/admin/related/delete",r=new Headers,t=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+t),{items:[{contentDefinition:a,contentId:i,relatedContentId:n}]});o&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var s=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(t)});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Deleting Related Content Failed")}}async function _deleteTagOrCollection(t,e,i,n,a){e=e+`/admin/${i}/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: POST`);try{var o=await fetch(e,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Delete Tag or Collection Failed")}}async function _removeTagOrCollection(t,e,i,n,a,o,r){var e=e+`/admin/${i}/content/delete`,s=new Headers,t=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+t),{items:[{contentDefinition:a,contentId:n}]});t.items[0][i+"Id"]=o,r&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var p=await fetch(e,{method:"POST",headers:s,body:JSON.stringify(t)});if(p.ok)return await p.json();throw await p.json()}catch(t){_apiExceptionHandler(t,"Removing Tag or Collection Failed")}}async function _createContent(t,e,i,n,a){let o=e+"/content/new?contentDefinitionId="+i;e=new Headers;e.append("Content-Type","application/json"),e.append("Authorization","Bearer "+t),n&&(o+="&language="+n),a&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:e});if(r.ok)return await r.json();throw await r.json()}catch(t){_apiExceptionHandler(t,"Create Content Failed")}}async function _deleteContent(t,e,i,n,a){e=e+`/content/${i}?contentDefinitionId=`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t);try{a&&console.log(`URL: ${e}
METHOD: DELETE`);var o=await fetch(e,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(t){_apiExceptionHandler(t,"Delete Content Failed")}}async function _getContent(t,e,i,n,a,o){let r=e+`/content/${i}?contentDefinitionId=`+n;a&&(r+="&isRevision="+a);e=new Headers;e.append("Authorization","Bearer "+t),e.append("Content-Type","application/json"),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:e});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Get Content Failed")}}async function _updateContent(t,e,i,n,a,o,r){var e=e+"/content/"+i,s=new Headers,t=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+t),{contentDefinitionId:n,contentId:i,properties:a,languageId:o});r&&console.log(`URL: ${e}
METHOD: PUT
BODY: `+JSON.stringify(t,null,4));try{var p=await fetch(e,{method:"PUT",headers:s,body:JSON.stringify(t)});if(p.ok)return await p.json();throw await p.json()}catch(t){_apiExceptionHandler(t,"Update Content Failed")}}async function _createAndUpdateEventInstance(t,e,i,n,a,o,r,s,p,c,l,d,h,u,f,g,w,y,v,_,m,T,E,D,S,C,O,L){var e=e+"/content/"+(i=null===i?_newGuid():i),A=new Headers;A.append("Content-Type","application/json"),A.append("Authorization","Bearer "+t);let U=null;o&&(U=d.startDate);t={contentId:i,contentDefinitionId:n,properties:{instanceName:a,startDatetime:o?`${U.getFullYear()}-${U.getMonth()+1}-${U.getDate()}T`+c:r,endDatetime:o?`${U.getFullYear()}-${U.getMonth()+1}-${U.getDate()}T`+l:s,disabled:h,overrideSeriesDetails:S,isRecurring:o}};o&&(t.properties.recurringDays=d.dates,t.properties.recurringWeeks=p),u&&(t.properties.series={description:C,id:O,properties:{}}),!S&&u||(t.description=f,t.isSecureOutput=v,t.primaryLiveStreamInputUrl=E,t.backupLiveStreamInputUrl=D,t.properties.prerollVideo=""===w?"":{id:w},t.properties.postrollVideo=""===y?"":{id:y},t.properties.archiveFolder=""===_?"":{id:_},t.properties.slateVideo=""===g?"":{id:g},t.properties.liveInputA=""===m?"":{id:m},t.properties.liveInputB=""===T?"":{id:T}),L&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var k=await fetch(e,{method:"POST",headers:A,body:JSON.stringify(t)});if(k.ok)return await k.json();throw await k.json()}catch(t){_apiExceptionHandler(t,"Create and Update Event Instance Failed")}}async function _deleteEventInstance(t,e,i,n,a){e=e+`/content/${i}?contentDefinitionId=`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: DELETE`);try{var o=await fetch(e,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(t){_apiExceptionHandler(t,"Delete Event Instance Failed")}}const Lookup=(t,e)=>({key:t,value:e}),DAY_OF_WEEK={Sunday:Lookup("7","3fc3b5ec-88be-41c9-be8f-5199735f3603"),Monday:Lookup("1","16bebfa8-65cc-451e-9744-d09d6c761e4a"),Tuesday:Lookup("2","02782764-f644-43fa-89cb-40cd3a3c3ece"),Wednesday:Lookup("3","1ca7cf91-5460-479f-84e5-e02cd51ca3f9"),Thursday:Lookup("4","2691d391-e1b1-43b6-97e2-5fc6b39479ef"),Friday:Lookup("5","b1897795-37a3-4a6e-a702-93643fe2ecab"),Saturday:Lookup("6","cf4c7688-417f-48d4-8b9d-fc6e6132d34e")};function _processDates(e,i){var n=[];for(let t=0;t<e.length;++t){const o=e[t];var a={description:o,id:DAY_OF_WEEK[o].value,properties:{abbreviation:o.substr(0,3),name:o,sortOrder:DAY_OF_WEEK[o].key}};n.push(a)}const o=new Date;let r=1,s=DAY_OF_WEEK[e[0]].key-o.getDay();for(;s<0;){var t=DAY_OF_WEEK[e[r]].key-o.getDay();(0<t||0==t&&1<=parseInt(i.substr(0,2))-o.getHours())&&(s=t),++r}for(let t=r;t<e.length;++t){var p=DAY_OF_WEEK[e[t]].key-o.getDay();p<s&&(0==p&&parseInt(i.substr(0,2))-o.getHours()<1||(s=p))}return o.setDate(o.getDate()+s),{startDate:o,dates:n}}async function _createLiveChannel(t,e,i,n,a,o,r,s,p,c,l,d,h){var u=e+"/liveChannel",f=new Headers,i=(f.append("Content-Type","application/json"),f.append("Authorization","Bearer "+t),{name:i,routeName:_slugify(i),enableHighAvailability:o,enableLiveClipping:r,isSecureOutput:s,outputScreenshots:p,type:{id:_LIVE_CHANNEL_TYPES[c],descrption:c}});n&&(i.thumbnailImage={id:n}),a&&(i.archiveFolderAsset={id:a}),"External"===c&&(i.externalUrl=l),d&&(o=await _getSecurityGroups(t,e,h),i.securityGroups=o.filter(t=>d.includes(t.description)).map(t=>({description:t.description,id:t.id}))),h&&console.log(`URL: ${u}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var g,w=await fetch(u,{method:"POST",headers:f,body:JSON.stringify(i)});if(w.ok)return await _waitForLiveChannelStatus(t,e,(g=await w.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,h),g;throw await w.json()}catch(t){_apiExceptionHandler(t,"Create Live Channel Failed")}}async function _deleteLiveChannel(e,t,i,n,a){t=t+"/liveChannel/"+i;let o=null;o=!0===n?(a&&console.log("Getting Live Channel Inputs IDs..."),await _getLiveChannelInputsIds(e,i)):null;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var r=await fetch(t,{method:"DELETE",headers:i});if(!r.ok)throw await r.json();if(n&&o&&0<o.length){a&&console.log("Deleting Live Channel Live Inputs...");for(let t=0;t<o.length;t++)await _deleteLiveInput(e,o[t])}}catch(t){_apiExceptionHandler(t,"Delete Live Channel Failed")}}async function _getLiveChannelInputsIds(t,e,i,n){const a=[];n&&console.log("Getting Live Channel Schedule Events...");t=await _getLiveChannelScheduleEvents(t,e,i,n);return t&&0<t.length&&t.forEach(t=>{t&&t.liveInput&&null!=t.liveInput&&t.liveInput.lookupId&&a.push(t.liveInput.lookupId)}),a}async function _getLiveChannelScheduleEvents(t,e,i,n){e+=`/liveChannel/${i}/liveScheduleEvent`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Channel Schedule Events Failed")}}async function _getLiveChannelStatusMessage(t,e,i,n){n&&console.log("Getting Live Channel...");t=await _getLiveChannel(t,e,i,n);return!!(t&&t.statusMessages&&0<t.statusMessages.length)&&t.statusMessages[0]}async function _getLiveChannelStatus(t,e,i,n){n&&console.log("Getting Live Channel...");t=await _getLiveChannel(t,e,i,n);return t?t.status.description:"Deleted"}async function _getLiveChannel(t,e,i,n){e=e+"/liveChannel/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Channel Failed")}}async function _getLiveChannels(t,e,i){var e=e+"/liveChannel",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Channels Failed")}}async function _getSecurityGroups(t,e,i){var e=e+"/lookup/22?lookupKey=99e8767a-00ba-4758-b9c2-e07b52c47016",n=new Headers;n.append("Authorization","Bearer "+t),n.append("Content-Type","application/json"),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return(await a.json()).items;throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Security Groups Failed")}}const _SECURITY_GROUPS={"Content Manager":"e81e25ba-b6ab-4676-980c-f51385008eb3",Everyone:"740ea96a-9c15-4c2e-ba1a-050ea893514b",Guest:"8354ce06-deeb-4da9-a190-af0eca8d9f56"},_LIVE_CHANNEL_STATUSES={CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Error:"Error",Idle:"Idle",New:"New",Pause:"Pause",Recovering:"Recovering",Running:"Running",Starting:"Starting",Stopping:"Stopping",Unmanaged:"Unmanaged",UpdateFailed:"Update Failed",Updating:"Updating"},_LIVE_CHANNEL_TYPES={External:"2bf01dd4-0a9c-4168-a61b-27e135732103",IVS:"2bf01dd4-0a9c-4168-a61b-27e135732102",Normal:"2bf01dd4-0a9c-4168-a61b-27e135732100",Realtime:"2bf01dd4-0a9c-4168-a61b-27e135732104"};async function _startLiveChannel(t,e,i,n){var a=e+`/liveChannel/${i}/start`,o=new Headers;o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+t),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(t,e,i,_LIVE_CHANNEL_STATUSES.Running,1200,20)}catch(t){_apiExceptionHandler(t,"Start Live Channel Failed")}}async function _stopLiveChannel(t,e,i,n){var a=e+`/liveChannel/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+t),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(t,e,i,_LIVE_CHANNEL_STATUSES.Idle,1200,20,n)}catch(t){_apiExceptionHandler(t,"Stop Live Channel Failed")}}async function _updateLiveChannel(t,e,i,n,a,o,r,s,p,c,l,d,h,u){var i=await _getLiveChannel(t,e,i,u),f=e+"/liveChannel",g=new Headers;g.append("Content-Type","application/json"),g.append("Authorization","Bearer "+t);n&&n!==i.name&&(i.name=n,i.routeName=_slugify(n)),a&&a!==i.thumbnailImage&&(i.thumbnailImage={id:a}),o&&o!==i.archiveFolderAsset.id&&(i.archiveFolderAsset={id:o}),r&&r!==i.enableHighAvailability&&(i.enableHighAvailability=r),s&&s!==i.enableLiveClipping&&(i.enableLiveClipping=s),p&&p!==i.isSecureOutput&&(i.isSecureOutput=p),c&&c!==i.outputScreenshots&&(i.outputScreenshots=c),l&&_LIVE_CHANNEL_STATUSES[l]!==i.type.id&&(i.type={id:_LIVE_CHANNEL_TYPES[l]}),"External"===l?d&&d!==i.externalUrl&&(i.externalUrl=d):d&&i.externalUrl&&delete i.externalUrl,h&&(n=(await _getSecurityGroups(t,e,u)).filter(t=>h.includes(t.description)).map(t=>({description:t.description,id:t.id})))!==i.securityGroups&&(i.securityGroups=n),u&&console.log(`URL: ${f}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var w,y=await fetch(f,{method:"PUT",headers:g,body:JSON.stringify(i)});if(y.ok)return await _waitForLiveChannelStatus(t,e,(w=await y.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,u),w;throw await y.json()}catch(t){_apiExceptionHandler(t,"Updating Live Channel Failed")}}async function _waitForLiveChannelStatus(t,e,i,n,a=30,o=2,r){var s=(new Date).getTime();let p=0;for(;p<a;){var c=await _getLiveChannelStatus(t,e,i,r);if(c===n)return void(r&&console.log(`Live Channel [${i}] transitioned to status [${n}]`));if(console.log(`Live Channel [${i}] current status is [${c}]`),"Error"===c)throw c=await _getLiveChannelStatusMessage(t,e,i,r),new Error(`Live Channel [${i}] is in [Error] status: `+c);if(p=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Channel [${i}] to transition to status [${n}]... [${Math.round(p)}/${a}]`),p>a)break;await _sleep(o)}throw new Error(`Waiting for Live Channel [${i}] to transition to status [${n}] timed out`)}async function _createLiveInput(t,e,i,n,a,o,r,s,p,c){var l=e+"/liveInput",d=new Headers,i=(d.append("Content-Type","application/json"),d.append("Authorization","Bearer "+t),{name:i,internalName:_slugify(i),type:{id:_LIVE_INPUT_TYPES[a],description:a}});"RTMP_PUSH"==a?n&&(i.sourceCidr=n):"RTMP_PULL"!==a&&"RTP_PUSH"!==a&&"URL_PULL"!==a||n&&(i.sources=[{url:n}]),o&&(i.isStandard=o),r&&(i.videoAsset={id:r}),s&&(i.destinations=s),p&&(i.sources=p),c&&console.log(`URL: ${l}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var h=await fetch(l,{method:"POST",headers:d,body:JSON.stringify(i)}),u=await h.json();if(h.ok)return await _waitForLiveInputStatus(t,e,u.id,_LIVE_INPUT_STATUSES.Detached,15,1,c),u;throw await h.json()}catch(t){_apiExceptionHandler(t,"Creating Live Input Failed")}}async function _deleteLiveInput(t,e,i,n){e=e+"/liveInput/"+i,i=new Headers;i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: DELETE`);try{var a=await fetch(e,{method:"DELETE",headers:i});if(!a.ok)throw await a.json()}catch(t){_apiExceptionHandler(t,"Delete Live Input Failed")}}async function _getLiveInputStatusMessage(t,e,i,n){n&&console.log("Getting Live Input...");t=await _getLiveInput(t,e,i,n);return t&&t.statusMessage&&t.statusMessage?t.statusMessage:""}async function _getLiveInputStatus(t,e,i,n){n&&console.log("Getting Live Input...");t=await _getLiveInput(t,e,i,n);return t?t.status.description:"Deleted"}async function _getLiveInput(t,e,i,n){e=e+"/liveInput/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Input Failed")}}async function _getLiveInputs(t,e,i){var e=e+"/liveInput",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Inputs Failed")}}const _LIVE_INPUT_STATUSES={Attached:"Attached",Attaching:"Attaching",CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Detached:"Detached",Detaching:"Detaching",Error:"Error",Paused:"Paused",Updating:"Updating"},_LIVE_INPUT_TYPES={RTMP_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1254",RTMP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1253",RTP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1252",UDP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1251",URL_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1255"};async function _updateLiveInput(t,e,i,n,a,o,r,s,p,c,l){var i=await _getLiveInput(t,e,i,l),d=e+"/liveInput",h=new Headers;h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+t);n&&n!==i.name&&(i.name=n,i.internalName=_slugify(n)),o&&_LIVE_INPUT_TYPES[o]!==i.type.id&&(i.type={id:_LIVE_INPUT_TYPES[o]}),"RTMP_PUSH"==o?(a&&a!==i.sourceCidr&&(i.sourceCidr=a),i.sources&&delete i.sources):"RTMP_PULL"===o||"RTP_PUSH"===o||"URL_PULL"===o?(a&&a!==i.sources&&(i.sources=[{url:a}]),i.sourceCidr&&delete i.sourceCidr):(i.sourceCidr&&delete i.sourceCidr,i.sources&&delete i.sources),r&&r!==i.isStandard&&(i.isStandard=r),s&&s!==i.videoAsset.id&&(i.videoAsset={id:s}),p&&p!==i.destinations&&(i.destinations=p),c&&c!==i.SOURCES&&(i.sources=c),l&&console.log(`URL: ${d}
METHOD: PUT
BODY: `+JSON.stringify(i,null,4));try{var u,f=await fetch(d,{method:"PUT",headers:h,body:JSON.stringify(i)});if(f.ok)return await _waitForLiveInputStatus(t,e,(u=await f.json()).id,_LIVE_INPUT_STATUSES.Detached,15,1,l),u;throw await f.json()}catch(t){_apiExceptionHandler(t,"Updating Live Input Failed")}}async function _waitForLiveInputStatus(t,e,i,n,a=30,o=2,r){var s=(new Date).getTime();let p=0;for(;p<a;){var c=await _getLiveInputStatus(t,e,i,r);if(c===n)return void(r&&console.log(`Live Input ${i} transitioned to status `+n));if(console.log(`Live Input [${i}] is in status [${c}]`),"Error"===c)throw c=await _getLiveInputStatusMessage(t,i,r),new Error(`Live Input ${i} is in Error status: `+c);if(p=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Input [${i}] to transition to status [${n}]... [${Math.round(p)}/${a}]`),p>a)break;await _sleep(o)}throw new Error(`Waiting for Live Input [${i}] to transition to status [${n}] timed out`)}async function _cancelBroadcast(t,e,i,n){var a=e+`/admin/liveOperator/${i}/cancel`,o=new Headers;o.append("Authorization","Bearer "+t),o.append("Content-Type","application/json"),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(t,e,i,"Idle",1200,20)}catch(t){_apiExceptionHandler(t,"Cancel Broadcast Failed")}}async function _cancelSegment(t,e,i,n){e+=`/admin/liveOperator/${i}/cancelSegment`,i=new Headers;i.append("Authorization","Bearer "+t),i.append("Content-Type","application/json"),n&&console.log(`URL: ${e}
METHOD: POST`);try{var a=await fetch(e,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(t){_apiExceptionHandler(t,"Cancel Segment Failed")}}async function _completeSegment(t,e,i,n,a,o){var e=e+`/admin/liveOperator/${i}/completeSegment`,r=new Headers,t=(r.append("Authorization","Bearer "+t),r.append("Content-Type","application/json"),{liveOperatorId:i});n&&Array.isArray(n)&&0<n.length&&(t.relatedContent=n.map(t=>({id:t}))),a&&Array.isArray(a)&&0<a.length&&(t.tags=a.map(t=>({id:t}))),o&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var s=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(t)});if(!s.ok)throw await s.json()}catch(t){_apiExceptionHandler(t,"Complete Segment Failed")}}async function _getCompletedSegments(t,e,i,n){e+=`/admin/liveOperator/${i}/segments`,i=new Headers;i.append("Authorization","Bearer "+t),i.append("Content-Type","application/json"),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Completed Segments Failed")}}async function _getLiveOperator(t,e,i,n){e=e+"/admin/liveOperator/"+i,i=new Headers;i.append("Authorization","Bearer "+t),i.append("Content-Type","application/json"),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Operator Failed")}}async function _getLiveOperators(t,e,i){var e=e+"/admin/liveOperator",n=new Headers;n.append("Authorization","Bearer "+t),n.append("Content-Type","application/json"),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Live Operators Failed")}}async function _startBroadcast(t,e,i,n,a,o,r,s,p){var c=e+"/admin/liveOperator/start",l=new Headers,d=(l.append("Authorization","Bearer "+t),l.append("Content-Type","application/json"),{id:i});n&&(d.prerollAsset={id:n}),a&&(d.postrollAsset={id:a}),o&&(d.liveInput={id:o}),r&&Array.isArray(r)&&0<r.length&&(d.relatedContent=r.map(t=>({id:t}))),s&&Array.isArray(s)&&0<s.length&&(d.tags=s.map(t=>({id:t}))),p&&console.log(`URL: ${c}
METHOD: POST
BODY: `+JSON.stringify(d,null,4));try{var h=await fetch(c,{method:"POST",headers:l,body:JSON.stringify(d)});if(!h.ok)throw await h.json();await _waitForLiveOperatorStatus(t,e,i,"Running",1200,20)}catch(t){_apiExceptionHandler(t,"Start Broadcast Failed")}}async function _startSegment(t,e,i,n){e+=`/admin/liveOperator/${i}/startSegment`,i=new Headers;i.append("Authorization","Bearer "+t),i.append("Content-Type","application/json"),n&&console.log(`URL: ${e}
METHOD: POST`);try{var a=await fetch(e,{method:"POST",headers:i});if(!a.ok)throw await a.json()}catch(t){_apiExceptionHandler(t,"Start Segment Failed")}}async function _stopBroadcast(t,e,i,n){var a=e+`/admin/liveOperator/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+t),o.append("Content-Type","application/json"),n&&console.log(`URL: ${a}
METHOD: POST`);try{var r=await fetch(a,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(t,e,i,"Idle",1200,20)}catch(t){_apiExceptionHandler(t,"Stop Broadcast Failed")}}async function _waitForLiveOperatorStatus(t,e,i,n,a=30,o=2,r){var s=(new Date).getTime();let p=0;for(;p<a;){var c=(await _getLiveOperator(t,e,i,r)).liveChannelStatus.description;if(c===n)return void(r&&console.log(`Live Operator ${i} transitioned to status `+n));if(console.log(`Live Operator [${i}] is in status [${c}]`),"Error"===c)throw new Error(`Live Operator ${i} is broken`);if(p=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Operator [${i}] to transition to status [${n}]... [${Math.round(p)}/${a}]`),p>a)break;await _sleep(o)}throw new Error(`Waiting for Live Operator [${i}] to transition to status [${n}] timed out`)}async function _addAssetScheduleEvent(t,e,i,n,a,o,r,s,p,c){var e=e+`/LiveChannel/${n}/liveScheduleEvent`,l=new Headers,t=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+t),{id:i,isLoop:r,channelId:n,durationTimeCode:s,previousId:p,type:{id:_eventType.videoAsset,description:"Video Asset"},asset:{id:a,description:o}});c&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var d=await fetch(e,{method:"POST",headers:l,body:JSON.stringify(t)});if(d.ok)return(await d.json()).changeList[0];throw await d.json()}catch(t){_apiExceptionHandler(t,"Adding Asset Schedule Event Failed")}}async function _addInputScheduleEvent(t,e,i,n,a,o,r,s,p,c){var e=e+`/LiveChannel/${i}/liveScheduleEvent`,l=new Headers,t=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+t),{channelId:i,fixedOnAirTimeUtc:s,type:{id:_eventType.liveInput,description:"Live Input"},liveInput:{id:n,description:a},previousId:p});o&&(t.liveInput2={id:o,description:r}),c&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var d=await fetch(e,{method:"POST",headers:l,body:JSON.stringify(t)});if(d.ok)return(await d.json()).changeList[0];throw await d.json()}catch(t){_apiExceptionHandler(t,"Adding Input Schedule Event Failed")}}const _eventType={liveInput:"eef7ef23-56dc-4f48-8c0e-1f4d52990405",videoAsset:"eef7ef23-56dc-4f48-8c0e-1f4d52990404"};async function _removeAssetScheduleEvent(t,e,i,n,a){e=e+`/LiveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: DELETE`);try{var o=await fetch(e,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Remove Asset Schedule Event Failed")}}async function _removeInputScheduleEvent(t,e,i,n,a){e=e+`/liveChannel/${i}/liveScheduleEvent/`+n,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${e}
METHOD: DELETE`);try{var o=await fetch(e,{method:"delete",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Remove Input Schedule Event Failed")}}async function _register(t,e,i,n,a,o){var t=t+"/account/register",r=new Headers,i=(r.append("Content-Type","application/json"),{firstName:i,lastName:n,email:e,password:a});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(i)});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Register user failed")}}async function _resendCode(t,e,i){var t=t+"/account/resend-code",n=new Headers,e=(n.append("Content-Type","application/json"),{userName:e});i&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var a=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(e)});if(!a.ok)throw await a.json()}catch(t){_apiExceptionHandler(t,"Resend code failed")}}async function _verify(t,e,i,n){var t=t+"/account/verify",a=new Headers,e=(a.append("Content-Type","application/json"),{userName:e,token:i});n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(e)});if(!o.ok)throw await o.json()}catch(t){_apiExceptionHandler(t,"Verify user failed")}}async function _forgotPassword(t,e,i){var t=t+"/account/forgot-password",n=new Headers,e=(n.append("Content-Type","application/json"),{username:e});i&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var a=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(e)}).catch(t=>{throw t});if(!a.ok)throw await a.json()}catch(t){_apiExceptionHandler(t,"Forgot Password Failed")}}async function _login(t,e,i,n){i+="/account/login",t={userName:t,password:e};n&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var a=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Login Failed")}}async function _logout(t,e,i,n){var i=i+"/account/logout",a=new Headers,t=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+t),{userSessionId:e});n&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(i,{method:"POST",headers:a,body:JSON.stringify(t)});if(!o.ok)throw await o.json()}catch(t){_apiExceptionHandler(t,"Logout Failed")}}async function _refreshToken(t,e,i){var e=e+"/account/refresh-token",n=new Headers,t=(n.append("Content-Type","application/json"),{refreshToken:t});i&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var a=await fetch(e,{method:"POST",headers:n,body:JSON.stringify(t)});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Refreshing Token Failed")}}async function _resetPassword(t,e,i,n,a){var t=t+"/account/reset-password",o=new Headers,e=(o.append("Content-Type","application/json"),{userName:e,TOKEN:i,newPassword:n});a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(!r.ok)throw await r.json()}catch(t){_apiExceptionHandler(t,"Reset Password Failed")}}async function _search(t,e,i,n,a,o,r,s,p,c,l,d,h,u){e+=`/${h}/search`,h=new Headers,h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+t),t={};i&&(t.query=i),t.pageOffset=n||0,t.pageSize=a||100,o&&(t.filters=o),r&&(t.sortFields=r),s&&(t.resultFields=s),p&&(t.similarAssetId=p),c&&(t.minScore=c),l&&(t.excludeTotalRecordCount=l),d&&(t.filterBinder=d),u&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var f=await fetch(e,{method:"POST",headers:h,body:JSON.stringify(t)});if(f.ok)return await f.json();throw await f.json()}catch(t){_apiExceptionHandler(t,"Search Failed")}}function _apiExceptionHandler(e,i){if(!e)throw new Error(i);if("string"==typeof e)throw new Error(i+": "+e);if(e.errors||0!==e.errors.length){let t="";for(var n in e.errors)Object.prototype.hasOwnProperty.call(e.errors,n)&&(t+=`${n}: ${e.errors[n]}\n`);throw new Error(i+": "+t)}throw new Error(i+": "+e.message)}import{getRandomValues}from"crypto";function _newGuid(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,t=>(t^getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16))}function _printDatetime(t){var e=(new Date).toLocaleTimeString();console.log(e+": "+t)}async function _sleep(e){if(e&&0!==e)return new Promise(t=>{setTimeout(()=>{t()},1e3*e)})}function _slugify(t){return t&&0!==t.trim().length?t.toString().normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase().trim().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-"):""}async function _changeEmail(t,e,i,n,a){var e=e+"/account/change-email",o=new Headers,t=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+t),{password:n,newEmail:i});a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var r=await fetch(e,{method:"POST",headers:o,body:JSON.stringify(t)});if(!r.ok)throw await r.json()}catch(t){_apiExceptionHandler(t,"Change email failed")}}async function _changePassword(t,e,i,n,a){var e=e+"/account/change-password",o=new Headers,t=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+t),{password:i,newPassword:n});a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var r=await fetch(e,{method:"POST",headers:o,body:JSON.stringify(t)});if(!r.ok)return await r.json()}catch(t){_apiExceptionHandler(t,"Change password failed")}}async function _getCountries(t,e,i){var e=e.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return(await a.json())[5].children;throw await a.json()}catch(t){_apiExceptionHandler(t,"Get countries failed")}}async function _getStates(t,e,i){var e=e.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return(await a.json())[6].children;throw await a.json()}catch(t){_apiExceptionHandler(t,"Get countries failed")}}async function _getUser(t,e,i){var e=e+"/account/user",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get user failed")}}async function _updateUser(t,e,i,n,a,o,r,s,p,c,l,d,h,u){var f,g=await _getUser(t,e,u),w=e+"/account/user",y=new Headers,v=(y.append("Content-Type","application/json"),y.append("Authorization","Bearer "+t),{}),t=_getCountries(e,u).find(t=>t.name===o),_={address:i,address2:n,city:a,stateId:_getStates(e,u).find(t=>t.name===h),country:t,firstName:r,lastName:s,phone:c,phoneExt:l,postalCode:d,organization:p};for(const T in _)null!==_[T]?v[T]=_[T]:null!=(f=g[T])&&(v[T]=f);u&&console.log(`URL: ${w}
METHOD: PUT
BODY: `+JSON.stringify(v,null,4));try{var m=await fetch(w,{method:"PUT",headers:y,body:JSON.stringify(v)});return m.ok||await m.json(),await m.json()}catch(t){_apiExceptionHandler(t,"Update user failed")}}async function _addContentsToContentGroup(t,e,i,n,a){e=e+"/contentgroup/add/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t=n;a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:i,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Adding Contents to Content Group Failed")}}async function _createContentGroup(t,e,i,n){var e=e+"/contentgroup",a=new Headers,t=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+t),{});i&&(t.name=i),n&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Creating Content Group Failed")}}async function _deleteContentGroup(t,e,i,n){e=e+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: DELETE`);try{var a=await fetch(e,{method:"DELETE",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Delete Content Group Failed")}}async function _getContentGroup(t,e,i,n){e=e+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:i});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Content Group Failed")}}async function _getContentGroups(t,e,i){var e=e+"/contentgroup",n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+t),i&&console.log(`URL: ${e}
METHOD: GET`);try{var a=await fetch(e,{method:"GET",headers:n});if(a.ok)return await a.json();throw await a.json()}catch(t){_apiExceptionHandler(t,"Get Content Groups Failed")}}async function _getPortalGroups(t,e,i,n){var e=e+"/portal/groups",a=new Headers,t=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+t),{returnedGroupNames:i});n&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Getting Portal Groups Failed")}}async function _removeContentsFromContentGroup(t,e,i,n,a){e=e+"/contentgroup/remove/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t=n;a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:i,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Removing Content From Content Group Failed")}}async function _renameContentGroup(t,e,i,n,a){e=e+"/contentgroup/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t={Name:n};a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"PATCH",headers:i,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Renaming Content Group Failed")}}async function _shareContentGroupWithUsers(t,e,i,n,a){e=e+"/contentgroup/share/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t=n;a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:i,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Sharing Content Group With Users Failed")}}async function _stopSharingContentGroupWithUsers(t,e,i,n,a){e=e+"/contentgroup/stopshare/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t=n;a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:i,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Stop Sharing Content Group With Users Failed")}}async function _guestInvite(t,e,i,n,a,o,r,s){var e=e+"/account/invite-user",p=new Headers,t=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+t),{contentId:i,contentDefinitionId:n,userId:a,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var c=await fetch(e,{method:"POST",headers:p,body:JSON.stringify(t)});if(c.ok)return await c.json();throw await c.json()}catch(t){_apiExceptionHandler(t,"Guest Invite failed")}}async function _participantPanelQuery(t,e,i,n,a){let o="";o="admin"==i?e+"/admin/user-session/"+n:e+"/user-session/"+n;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),a&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:i});if(r.ok)return await r.json();throw await r.json()}catch(t){_apiExceptionHandler(t,"Participant panel query failed")}}async function _ping(t,e,i,n){var e=e+"/account/ping",a=new Headers,t=(a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+t),{userId:n});i&&(t.applicationId=i);try{var o=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)});if(o.ok)return await o.json();throw await o.json()}catch(t){_apiExceptionHandler(t,"Ping user failed")}}async function _registerGuest(t,e,i,n,a,o,r){var e=e+"/account/register-guest",s=new Headers,t=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+t),{email:i,firstName:n,lastName:a,password:o});r&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var p=await fetch(e,{method:"POST",headers:s,body:JSON.stringify(t)});if(p.ok)return await p.json();throw await p.json()}catch(t){_apiExceptionHandler(t,"Register guest failed")}}async function _removeGuest(t,e,i,n,a,o,r,s){var e=e+"/account/remove-user",p=new Headers,t=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+t),{contentId:i,contentDefinitionId:n,userId:a,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var c=await fetch(e,{method:"POST",headers:p,body:JSON.stringify(t)});if(c.ok)return await c.json();throw await c.json()}catch(t){_apiExceptionHandler(t,"Remove guest failed")}}async function _createForm(t,e,i,n,a){e=e+"/media/form/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),t=n;a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:i,body:JSON.stringify(t)});if(o.ok)throw await o.json();return await o.json()}catch(t){_apiExceptionHandler(t,"Creating Form Failed")}}async function _mediaSearch(t,e,i,n,a,o,r,s,p){var e=e+"/media/search",c=new Headers,t=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+t),{searchQuery:i,ids:n,sortFields:[{fieldName:a,sortType:o}]});t.pageOffset=r||0,t.pageSize=s||100,p&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var l=await fetch(e,{method:"POST",headers:c,body:JSON.stringify(t)});if(l.ok)throw await l.json();return await l.json()}catch(t){_apiExceptionHandler(t,"Media Search Failed")}}async function _getVideoTracking(t,e,i,n,a,o){let r=e+"/asset/tracking?assetId="+i;e=new Headers;e.append("Content-Type","application/json"),e.append("Authorization","Bearer "+t),n&&(r+="&trackingEvent="+n),a&&(r+="&second="+a),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:e});if(s.ok)return await s.json();throw await s.json()}catch(t){_apiExceptionHandler(t,"Get Video Tracking Failed")}}