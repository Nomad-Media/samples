import config from"./config/config.js";class NomadSDK{constructor(e){this.config=e,this.token=null,this.refreshTokenVal=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,this.debugMode=e.debugMode||!1}async _init(){await this.login(),this.__scheduleTokenRefresh()}async login(){_printDatetime("Logging in as "+this.config.username);try{var e=await _login(this.config.username,this.config.password,this.config.serviceApiUrl,this.debugMode);this.token=e.token,this.refreshTokenVal=e.refreshToken,this.expirationSeconds=Date.now()+1e3*e.expirationSeconds,this.userSessionId=e.userSessionId,this.id=e.id,_printDatetime("Login successful")}catch(e){throw _printDatetime("Login failed"),e}}async logout(){null===this.token&&await this._init(),_printDatetime("Logging out");try{await _logout(this.token,this.userSessionId,this.config.serviceApiUrl,this.debugMode),this.token=null,this.refreshTokenVal=null,this.expirationSeconds=null,this.userSessionId=null,this.id=null,_printDatetime("Logout successful")}catch(e){throw _printDatetime("Loggout failed"),e}}async refreshToken(){_printDatetime("Refreshing token");try{var e=await _refreshToken(this.refreshTokenVal,this.config.serviceApiUrl,this.debugMode);this.token=e.token,_printDatetime("Token refresh successful")}catch(e){throw _printDatetime("Token refresh failed"),e}}__scheduleTokenRefresh(){var e;this.token&&this.expirationSeconds&&0<(e=this.expirationSeconds-Date.now())&&(this.refreshTimer&&clearTimeout(this.refreshTimer),this.refreshTimer=setTimeout(async()=>{await this.refreshToken(),this.__scheduleTokenRefresh()},e-5e3))}async forgotPassword(){var t=this.config.username;_printDatetime("Sending code to "+t);try{await _forgotPassword(this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Code sent to "+t)}catch(e){throw _printDatetime("Code failed to send to "+t),e}}async resetPassword(e,t){var i=this.config.username;_printDatetime("Resetting password for "+i);try{await _resetPassword(this.config.serviceApiUrl,i,e,t,this.debugMode),_printDatetime("Password reset for "+i)}catch(e){throw _printDatetime("Password failed to reset for "+i),e}}async getAssetDetails(t){null===this.token&&await this._init(),_printDatetime("Getting asset details for "+t);try{var e=await _getAssetDetails(this.token,this.config.serviceApiUrl,t,this.config.apiType,this.debugMode);return _printDatetime("Asset details retrieved for "+t),e}catch(e){throw _printDatetime("Asset details failed to retrieve for "+t),e}}async uploadAsset(e,t,i,a,n,o,r,s,l){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Uploading asset "+e);let c=null;try{_printDatetime("Starting upload"),c=await _startUpload(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,this.debugMode),await _multiThreadUpload(this.token,this.config.serviceApiUrl,s,c,this.debugMode),await _completeUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode);var d=c.assetId;return _printDatetime("Upload successful"),d}catch(e){throw null!==c&&await _cancelUpload(this.token,this.config.serviceApiUrl,c.id,this.debugMode),_printDatetime("Upload failed"),e}}async getAudit(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting audit for "+t);try{var e=await _getAudit(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Audit retrieved for "+t),e}catch(e){throw _printDatetime("Audit failed to retrieve for "+t),e}}async clearServerCache(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Clearing server cache");try{await _clearServerCache(this.token,this.config.serviceApiUrl,this.debugMode),_printDatetime("Server cache cleared")}catch(e){throw _printDatetime("Server cache failed to clear"),e}}async getConfig(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting config");try{var t=await _getConfig(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Config retrieved"),t}catch(e){throw _printDatetime("Config failed to retrieve"),e}}async getServerTime(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting server time");try{var e=await _getServerTime(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Server time retrieved"),e}catch(e){throw _printDatetime("Server time failed to retrieve"),e}}async createContent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating content");try{var i=await _createContent(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Content created: "+i.contentId),i}catch(e){throw _printDatetime("Content failed to create"),e}}async deactivateContentUserTrack(t,e,i,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deactivating content user track: "+t);try{await _deactivateContentUserTrack(this.token,this.config.serviceApiUrl,t,e,i,a,this.debugMode),_printDatetime("Content user track deactivated: "+t)}catch(e){throw _printDatetime("Content user track failed to deactivate: "+t),e}}async deleteContent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting content: "+t);try{await _deleteContent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Content deleted: "+t)}catch(e){throw _printDatetime("Content failed to delete: "+t),e}}async getContentUserTrack(t,e,i,a,n,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting content user track: "+t),n=n||0,o=o||100;try{var r=await _getContentUserTrack(this.token,this.config.serviceApiUrl,t,e,i,a,n,o,this.debugMode);return _printDatetime("Content user track retrieved: "+t),r}catch(e){throw _printDatetime("Content user track failed to retrieve: "+t),e}}async getContentUserTrackTouch(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting content user track touch: "+t);try{var i=await _getContentUserTrackTouch(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content user track touch retrieved: "+t),i}catch(e){throw _printDatetime("Content user track touch failed to retrieve: "+t),e}}async getContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting content: "+t);try{var a=await _getContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Content retrieved: "+t),a}catch(e){throw _printDatetime("Content failed to retrieve: "+t),e}}async updateContent(t,e,i,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating content: "+t);try{var n=await _updateContent(this.token,this.config.serviceApiUrl,t,e,i,a,this.debugMode);return _printDatetime("Content updated: "+t),n}catch(e){throw _printDatetime("Content failed to update: "+t),e}}async addCustomProperties(t,e,i,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding custom properties to content: "+t);try{var n=await _addCustomProperties(this.token,this.config.serviceApiUrl,t,e,i,a,this.debugMode);return _printDatetime("Custom properties added to content: "+t),n}catch(e){throw _printDatetime("Custom properties failed to add to content: "+t),e}}async addRelatedContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding related content to content: "+t);try{var a=await _addRelatedContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Related content added to content: "+t),a.items[0]}catch(e){throw _printDatetime("Related content failed to add to content: "+t),e}}async addTagOrCollection(t,i,e,a,n,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Adding ${t} to content `+i);try{var r=await _addTagOrCollection(this.token,this.config.serviceApiUrl,t,i,e,a,n,o,this.debugMode);return _printDatetime(t+" added to content: "+i),r.items[0]}catch(e){throw _printDatetime(`Adding ${t} to content: ${i} failed`),e}}async createTagOrCollection(t,i){null===this.token&&await this._init(),_printDatetime(`Creating ${t}: `+i);try{var e=await _createTagOrCollection(this.token,this.config.serviceApiUrl,t,i,this.debugMode);return _printDatetime(t+" created: "+i),e}catch(e){throw _printDatetime(t+" failed to create: "+i),e}}async deleteRelatedContent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting related content from content: "+t);try{var a=await _deleteRelatedContent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Related content deleted from content: "+t),a.items[0]}catch(e){throw _printDatetime("Related content failed to delete from content: "+t),e}}async deleteTagOrCollection(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting tag or collection: "+t);try{var i=await _deleteTagOrCollection(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Tag or collection deleted: "+t),i}catch(e){throw _printDatetime("Tag or collection failed to delete: "+t),e}}async getTagOrCollection(t,i){null===this.token&&await this._init(),_printDatetime(`Getting ${t}: `+i);try{var e=await _getTagOrCollection(this.token,this.config.serviceApiUrl,t,i,this.debugMode);return _printDatetime(t+" retrieved: "+i),e}catch(e){throw _printDatetime(t+" failed to retrieve: "+i),e}}async removeTagOrCollection(t,i,e,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime(`Removing ${t} from content: `+i);try{var n=await _removeTagOrCollection(this.token,this.config.serviceApiUrl,t,i,e,a,this.debugMode);return _printDatetime(t+" removed from content: "+i),n.items[0]}catch(e){throw _printDatetime(t+" failed to remove from content: "+i),e}}async createAndUpdateEvent(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y,w,m,v,_,T,D,E,S,C,O){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating/Updating event: "+i);try{var A=await _createAndUpdateEvent(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y,w,m,v,_,T,D,E,S,C,O,this.debugMode);return _printDatetime("Event created/updated: "+A),A}catch(e){throw _printDatetime("Event failed to create/update: "+i),e}}async deleteEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting event: "+t);try{await _deleteEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Event deleted: "+t)}catch(e){throw _printDatetime("Event failed to delete: "+t),e}}async addLiveScheduleToEvent(t,e,i,a,n,o,r,s,l,c,d){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding Live Schedule to Event: "+t);try{await _addLiveScheduleToEvent(this.token,this.config.serviceApiUrl,t,e,i,a,n,o,r,s,l,c,d,this.debugMode),_printDatetime("Live Schedule added to Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to add to Event: "+t),e}}async extendLiveSchedule(t,e,i,a,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Extending Live Schedule of Event: "+t);try{await _extendLiveSchedule(this.token,this.config.serviceApiUrl,t,e,i,a,n,this.debugMode),_printDatetime("Live Schedule extended of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to extend of Event: "+t),e}}async getLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Getting Live Schedule of Event: "+t);try{var e=await _getLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Schedule retrieved of Event: "+t),e}catch(e){throw _printDatetime("Live Schedule failed to retrieve of Event: "+t),e}}async startLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Starting Live Schedule of Event: "+t);try{await _startLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Schedule started of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to start of Event: "+t),e}}async stopLiveSchedule(t){null===this.token&&await this._init(),_printDatetime("Stopping Live Schedule of Event: "+t);try{await _stopLiveSchedule(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Schedule stopped of Event: "+t)}catch(e){throw _printDatetime("Live Schedule failed to stop of Event: "+t),e}}async createLiveChannel(e,t,i,a,n,o,r,s,l,c,d){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Channel: "+e);try{var p=await _createLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,this.debugMode);return _printDatetime("Live Channel created: "+p.id),p}catch(e){throw _printDatetime("Live Channel failed to create"),e}}async deleteLiveChannel(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Channel: "+t);try{await _deleteLiveChannel(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Live Channel deleted: "+t)}catch(e){throw _printDatetime("Live Channel failed to delete: "+t),e}}async getLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channel: "+t);try{var e=await _getLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Channel gotten: "+t),e}catch(e){throw _printDatetime("Live Channel failed to get: "+t),e}}async getLiveChannels(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Channels");try{var e=await _getLiveChannels(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Channels gotten"),e}catch(e){throw _printDatetime("Live Channels failed to get"),e}}async liveChannelRefresh(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Refreshing Live Channels");try{await _liveChannelRefresh(this.token,this.config.serviceApiUrl,this.debugMode),_printDatetime("Live Channels refreshed")}catch(e){throw _printDatetime("Live Channels failed to refresh"),e}}async nextEvent(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Next Event of Live Channel: "+t);try{var e=await _nextEvent(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Next Event gotten of Live Channel: "+t),e}catch(e){throw _printDatetime("Next Event failed to get of Live Channel: "+t),e}}async startLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting Live Channel: "+t);try{await _startLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Channel started: "+t)}catch(e){throw _printDatetime("Live Channel failed to start: "+t),e}}async startOutputTracking(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting Output Tracking for Live Channel: "+t);try{await _startOutputTracking(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Output Tracking started for Live Channel: "+t)}catch(e){throw _printDatetime("Output Tracking failed to start for Live Channel: "+t),e}}async stopLiveChannel(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");this.debugMode&&console.log("Stopping Live Channel: "+t);try{await _stopLiveChannel(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Channel stopped: "+t)}catch(e){throw _printDatetime("Live Channel failed to stop: "+t),e}}async updateLiveChannel(e,t,i,a,n,o,r,s,l,c,d,p){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Channel: "+e);try{var h=await _updateLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,p,this.debugMode);return _printDatetime("Live Channel updated: "+e),h}catch(e){throw _printDatetime("Live Channel failed to update"),e}}async createLiveInput(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating Live Input: "+e);try{var s=await _createLiveInput(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Live Input created: "+s.id),s}catch(e){throw _printDatetime("Live Input failed to create"),e}}async deleteLiveInput(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting Live Input: "+t);try{await _deleteLiveInput(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Live Input deleted: "+t)}catch(e){throw _printDatetime("Live Input failed to delete: "+t),e}}async getLiveInput(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Input: "+t);try{var e=await _getLiveInput(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live Input gotten: "+t),e}catch(e){throw _printDatetime("Live Input failed to get: "+t),e}}async getLiveInputs(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting Live Inputs");try{var e=await _getLiveInputs(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live Inputs gotten"),e}catch(e){throw _printDatetime("Live Inputs failed to get"),e}}async updateLiveInput(e,t,i,a,n,o,r,s){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating Live Input: "+e);try{var l=await _updateLiveInput(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,this.debugMode);return _printDatetime("Live Input updated: "+e),l}catch(e){throw _printDatetime("Live Input failed to update"),e}}async cancelBroadcast(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling broadcast: "+t);try{await _cancelBroadcast(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Broadcast cancelled: "+t)}catch(e){throw _printDatetime("Broadcast failed to cancel: "+t),e}}async cancelSegment(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Cancelling segment: "+t);try{var e=await _cancelSegment(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Segment cancelled: "+t),e}catch(e){throw _printDatetime("Segment failed to cancel: "+t),e}}async completeSegment(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Completing segment: "+t);try{await _completeSegment(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode),_printDatetime("Segment completed: "+t)}catch(e){throw _printDatetime("Segment failed to complete: "+t),e}}async getCompletedSegments(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting completed segments");try{var t=await _getCompletedSegments(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Completed segments gotten"),t}catch(e){throw _printDatetime("Completed segments failed to get"),e}}async getLiveOperator(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operator: "+t);try{var e=await _getLiveOperator(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Live operator gotten: "+t),e}catch(e){throw _printDatetime("Live operator failed to get: "+t),e}}async getLiveOperators(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting live operators");try{var e=await _getLiveOperators(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Live operators gotten"),e}catch(e){throw _printDatetime("Live operators failed to get"),e}}async startBroadcast(e,t,i,a,n,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting broadcast");try{await _startBroadcast(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,this.debugMode),_printDatetime("Broadcast started")}catch(e){throw _printDatetime("Broadcast failed to start"),e}}async startSegment(t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting segment: "+t);try{await _startSegment(this.token,this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Segment started: "+t)}catch(e){throw _printDatetime("Segment failed to start: "+t),e}}async stopBroadcast(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Stopping broadcast");try{await _stopBroadcast(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Broadcast stopped")}catch(e){throw _printDatetime("Broadcast failed to stop"),e}}async addAssetScheduleEvent(t,e,i,a,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding asset schedule event to channel: "+t);try{var o=await _addAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,i,a,n,this.debugMode);return _printDatetime("Asset schedule event added to channel: "+t),o}catch(e){throw _printDatetime("Asset schedule event failed to add to channel: "+t),e}}async addInputScheduleEvent(t,e,i,a,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Adding input schedule event to channel "+t);try{var o=await _addInputScheduleEvent(this.token,this.config.serviceApiUrl,t,e,i,a,n,this.debugMode);return _printDatetime("Input schedule event added to channel "+t),o}catch(e){throw _printDatetime("Input schedule event failed to add to channel "+t),e}}async getAssetScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting asset schedule event: "+t);try{var i=await _getAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Asset schedule event gotten: "+t),i}catch(e){throw _printDatetime("Asset schedule event failed to get: "+t),e}}async getInputScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting asset schedule event: "+t);try{var i=await _getInputScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Asset schedule event gotten: "+t),i}catch(e){throw _printDatetime("Input schedule event failed to get: "+t),e}}async moveScheduleEvent(t,e,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Moving schedule event: "+t);try{var a=await _moveScheduleEvent(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode);return _printDatetime("Schedule event moved: "+t),a}catch(e){throw _printDatetime("Schedule event failed to move: "+t),e}}async removeAssetScheduleEvent(t,e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing asset schedule event: "+t);try{await _removeAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Asset schedule event removed: "+t)}catch(e){throw _printDatetime("Asset schedule event failed to remove: "+t),e}}async removeInputScheduleEvent(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Removing input schedule event");try{await _removeInputScheduleEvent(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Input schedule event removed")}catch(e){throw _printDatetime("Input schedule event failed to remove"),e}}async updateAssetScheduleEvent(t,e,i,a,n,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating asset schedule event: "+t);try{var r=await _updateAssetScheduleEvent(this.token,this.config.serviceApiUrl,t,e,i,a,n,o,this.debugMode);return _printDatetime("Asset schedule event updated: "+t),r}catch(e){throw _printDatetime("Asset schedule event failed to update: "+t),e}}async updateInputScheduleEvent(e,t,i,a,n,o){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating input schedule event");try{var r=await _updateInputScheduleEvent(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,this.debugMode);return _printDatetime("Input schedule event updated"),r}catch(e){throw _printDatetime("Input schedule event failed to update"),e}}async createIntelligentPlaylist(e,t,i,a,n,o,r,s,l,c){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");null===e&&(e=[]),null===n&&(n=[]),null===l&&(l=[]),_printDatetime("Creating intelligent playlist");try{var d=await _createIntelligentPlaylist(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,this.debugMode);return _printDatetime("Intelligent playlist created"),d}catch(e){throw _printDatetime("Intelligent playlist failed to create"),e}}async createIntelligentSchedule(e,t,i,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating intelligent schedule");try{var n=await _createIntelligentSchedule(this.token,this.config.serviceApiUrl,e,t,i,a,this.debugMode);return _printDatetime("Intelligent schedule created"),n}catch(e){throw _printDatetime("Intelligent schedule failed to create"),e}}async createPlaylist(e,t,i,a){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating playlist");try{var n=await _createPlaylist(this.token,this.config.serviceApiUrl,e,t,i,a,this.debugMode);return _printDatetime("Playlist created"),n}catch(e){throw _printDatetime("Playlist failed to create"),e}}async createPlaylistVideo(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating playlist video");try{var a=await _createPlaylistVideo(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Playlist video created"),a}catch(e){throw _printDatetime("Playlist video failed to create"),e}}async createScheduleItemAsset(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating schedule item asset");try{var s=await _createScheduleItemAsset(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item asset created"),s}catch(e){throw _printDatetime("Schedule item asset failed to create"),e}}async createScheduleItemLiveChannel(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating schedule item live channel");try{var s=await _createScheduleItemLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item live channel created"),s}catch(e){throw _printDatetime("Schedule item live channel failed to create"),e}}async createScheduleItemSearchFilter(e,t,i,a,n,o,r,s,l,c,d,p,h,u){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");null===t&&(t=[]),null===l&&(l=[]),_printDatetime("Creating schedule item search filter");try{var f=await _createScheduleItemSearchFilter(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,p,h,u,this.debugMode);return _printDatetime("Schedule item search filter created"),f}catch(e){throw _printDatetime("Schedule item search filter failed to create"),e}}async createScheduleItemPlaylistSchedule(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Creating schedule item playlist schedule");try{var s=await _createScheduleItemPlaylistSchedule(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item playlist schedule created"),s}catch(e){throw _printDatetime("Schedule item playlist schedule failed to create"),e}}async deleteIntelligentPlaylist(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting intelligent playlist");try{await _deleteIntelligentPlaylist(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Intelligent playlist deleted")}catch(e){throw _printDatetime("Intelligent playlist failed to delete"),e}}async deleteIntelligentSchedule(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting intelligent schedule");try{await _deleteIntelligentSchedule(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Intelligent schedule deleted")}catch(e){throw _printDatetime("Intelligent schedule failed to delete"),e}}async deletePlaylist(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting playlist");try{await _deletePlaylist(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Playlist deleted")}catch(e){throw _printDatetime("Playlist failed to delete"),e}}async deleteScheduleItem(e,t){null===this.token&&await this._init(),_printDatetime("Deleting schedule item");try{await _deleteScheduleItem(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Schedule item deleted")}catch(e){throw _printDatetime("Schedule item failed to delete"),e}}async generateSchedule(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Generating schedule");try{await _generateSchedule(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("Schedule generated")}catch(e){throw _printDatetime("Schedule failed to generate"),e}}async getIntelligentPlaylist(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting intelligent playlist");try{var t=await _getIntelligentPlaylist(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Intelligent playlist gotten"),t}catch(e){throw _printDatetime("Intelligent playlist failed to get"),e}}async getIntelligentSchedule(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting intelligent schedule");try{var t=await _getIntelligentSchedule(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Intelligent schedule gotten"),t}catch(e){throw _printDatetime("Intelligent schedule failed to get"),e}}async getPlaylist(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting playlist");try{var t=await _getPlaylist(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Playlist gotten"),t}catch(e){throw _printDatetime("Playlist failed to get"),e}}async getScheduleItem(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting schedule item");try{var i=await _getScheduleItem(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Schedule item gotten"),i}catch(e){throw _printDatetime("Schedule item failed to get"),e}}async getScheduleItems(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting schedule items");try{var t=await _getScheduleItems(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Schedule items gotten"),t}catch(e){throw _printDatetime("Schedule items failed to get"),e}}async getSchedulePreview(e){null===this.token&&await this._init(),"admin"!==this.config.apiType&&_printDatetime("Getting schedule preview");try{var t=await _getSchedulePreview(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Schedule preview gotten"),t}catch(e){throw _printDatetime("Schedule preview failed to get"),e}}async moveScheduleItem(e,t,i){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Moving schedule item");try{var a=await _moveScheduleItem(this.token,this.config.serviceApiUrl,e,t,i,this.debugMode);return _printDatetime("Schedule item moved"),a}catch(e){throw _printDatetime("Schedule item failed to move"),e}}async publishIntelligentSchedule(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Publishing intelligent schedule");try{var i=await _publishIntelligentSchedule(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Intelligent schedule published"),i}catch(e){throw _printDatetime("Intelligent schedule failed to publish"),e}}async startSchedule(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Starting schedule");try{var i=await _startSchedule(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Schedule started"),i}catch(e){throw _printDatetime("Schedule failed to start"),e}}async stopSchedule(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Stopping schedule");try{var i=await _stopSchedule(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Schedule stopped"),i}catch(e){throw _printDatetime("Schedule failed to stop"),e}}async updateIntelligentPlaylist(e,t,i,a,n,o,r,s,l,c,d){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");null===t&&(t=[]),null===o&&(o=[]),null===c&&(c=[]),_printDatetime("Updating intelligent playlist");try{var p=await _updateIntelligentPlaylist(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,this.debugMode);return _printDatetime("Intelligent playlist updated"),p}catch(e){throw _printDatetime("Intelligent playlist failed to update"),e}}async updateIntelligentSchedule(e,t,i,a,n){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating intelligent schedule");try{var o=await _updateIntelligentSchedule(this.token,this.config.serviceApiUrl,e,t,i,a,n,this.debugMode);return _printDatetime("Intelligent schedule updated"),o}catch(e){throw _printDatetime("Intelligent schedule failed to update"),e}}async updatePlaylist(e,t,i,a,n){null===this.token&&await this._init(),null===t&&(t={}),null===n&&(n={}),_printDatetime("Updating playlist");try{var o=await _updatePlaylist(this.token,this.config.serviceApiUrl,e,t,i,a,n,this.debugMode);return _printDatetime("Playlist updated"),o}catch(e){throw _printDatetime("Playlist failed to update"),e}}async updateScheduleItemAsset(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating schedule item asset");try{var s=await _updateScheduleItemAsset(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item asset updated"),s}catch(e){throw _printDatetime("Schedule item asset failed to update"),e}}async updateScheduleItemLiveChannel(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating schedule item live channel");try{var s=await _updateScheduleItemLiveChannel(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item live channel updated"),s}catch(e){throw _printDatetime("Schedule item live channel failed to update"),e}}async updateScheduleItemSearchFilter(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating schedule item search filter");try{var g=await _updateScheduleItemSearchFilter(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,this.debugMode);return _printDatetime("Schedule item search filter updated"),g}catch(e){throw _printDatetime("Schedule item search filter failed to update"),e}}async updateScheduleItemPlaylistSchedule(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Updating schedule item playlist schedule");try{var s=await _updateScheduleItemPlaylistSchedule(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,this.debugMode);return _printDatetime("Schedule item playlist schedule updated"),s}catch(e){throw _printDatetime("Schedule item playlist schedule failed to update"),e}}async deleteUserContentAttributeData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user content attribute data");try{null===e&&(e=this.id),await _deleteUserContentAttributeData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User content attribute data deleted")}catch(e){throw _printDatetime("User content attribute data failed to delete"),e}}async deleteUserContentGroupData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user content group data");try{null===e&&(e=this.id),await _deleteUserContentGroupData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User content group data deleted")}catch(e){throw _printDatetime("User content group data failed to delete"),e}}async deleteUserContentSecurityData(e,t,i,a,n,o,r){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user content security data");try{null===a&&(a=this.id),await _deleteUserContentSecurityData(this.token,this.config.serviceApiUrl,e,t,a,i,n,o,r,this.debugMode),_printDatetime("User content security data deleted")}catch(e){throw _printDatetime("User content security data failed to delete"),e}}async deleteUserData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user data");try{null===e&&(e=this.id),await _deleteUserData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User data deleted")}catch(e){throw _printDatetime("User data failed to delete"),e}}async deleteUserDislikesData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user dislikes data");try{null===e&&(e=this.id),await _deleteUserDislikesData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User dislikes data deleted")}catch(e){throw _printDatetime("User dislikes data failed to delete"),e}}async deleteUserFavoritesData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user favorites data");try{null===e&&(e=this.id),await _deleteUserFavoritesData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User favorites data deleted")}catch(e){throw _printDatetime("User favorites data failed to delete"),e}}async deleteUserLikesData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user likes data");try{null===e&&(e=this.id),await _deleteUserLikesData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User likes data deleted")}catch(e){throw _printDatetime("User likes data failed to delete"),e}}async deleteUserSavedSearchData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user saved search data");try{null===e&&(e=this.id),await _deleteUserSavedSearchData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User saved search data deleted")}catch(e){throw _printDatetime("User saved search data failed to delete"),e}}async deleteUserSessionData(e){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Deleting user session data");try{null===e&&(e=this.id),await _deleteUserSessionData(this.token,this.config.serviceApiUrl,e,this.debugMode),_printDatetime("User session data deleted")}catch(e){throw _printDatetime("User session data failed to delete"),e}}async deleteUserVideoTrackingData(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");try{null===a&&(a=this.id),await _deleteUserVideoTrackingData(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,this.debugMode),_printDatetime("User video tracking data deleted")}catch(e){throw _printDatetime("User video tracking data failed to delete"),e}}async deleteUser(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");try{await _deleteUser(this.token,this.config.serviceApiUrl,this.id,this.debugMode),_printDatetime("User deleted")}catch(e){throw _printDatetime("User failed to delete"),e}}async changeSessionStatus(e,t){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Changing session status");try{var i=await _changeSessionStatus(this.token,this.config.serviceApiUrl,this.userSessionId,e,t,this.debugMode);return _printDatetime("Session status changed"),i}catch(e){throw _printDatetime("Session status failed to change"),e}}async getUserSession(){if(null===this.token&&await this._init(),"admin"!==this.config.apiType)throw new Error("This function is only available for admin API type.");_printDatetime("Getting user session");try{var e=await _getUserSession(this.token,this.config.serviceApiUrl,this.userSessionId,this.debugMode);return _printDatetime("User session gotten"),e}catch(e){throw _printDatetime("User session failed to get"),e}}async register(t,e,i,a){_printDatetime("Registering user: "+t);try{var n=await _register(this.config.serviceApiUrl,t,e,i,a,this.debugMode);return _printDatetime("User registered: "+t),n}catch(e){throw _printDatetime("User failed to register: "+t),e}}async resendCode(t){_printDatetime("Resending code: "+t);try{await _resendCode(this.config.serviceApiUrl,t,this.debugMode),_printDatetime("Code resent: "+t)}catch(e){throw _printDatetime("Code failed to resend: "+t),e}}async verify(t,e){_printDatetime("Verifying user: "+t);try{var i=await _verify(this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("User verified: "+t),i}catch(e){throw _printDatetime("User failed to verify: "+t),e}}async ping(){null===this.token&&await this._init(),_printDatetime("Pinging user");try{var e=await _ping(this.token,this.config.serviceApiUrl,null,this.userSessionId,this.debugMode);return _printDatetime("User pinged"),e}catch(e){throw _printDatetime("User failed to ping"),e}}async pingAuth(){null===this.token&&await this._init(),_printDatetime("Pinging user");try{var e=await _pingAuth(this.token,this.config.serviceApiUrl,null,this.userSessionId,this.debugMode);return _printDatetime("User pinged"),e}catch(e){throw _printDatetime("User failed to ping"),e}}async search(e,t,i,a,n,o,r,s,l,c){null===this.token&&await this._init(),_printDatetime("Searching...");try{var d=await _search(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,this.config.apiType,this.debugMode);return _printDatetime("Search complete"),!!d.hasItems&&d}catch(e){throw _printDatetime("Search failed"),e}}async changeEmail(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing email: "+t);try{await _changeEmail(this.token,this.config.serviceApiUrl,t,e,this.debugMode),_printDatetime("Email changed: "+t)}catch(e){throw _printDatetime("Email failed to change: "+t),e}}async changePassword(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Changing password");try{await _changePassword(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Password changed")}catch(e){throw _printDatetime("Password failed to change"),e}}async getUser(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting user");try{var e=await _getUser(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("User gotten"),e}catch(e){throw _printDatetime("User failed to get"),e}}async updateUser(e,t,i,a,n,o,r,s,l,c,d){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Updating user");try{var p=await _updateUser(this.token,this.config.serviceApiUrl,e,t,i,a,n,o,r,s,l,c,d,this.debugMode);return _printDatetime("User updated"),p}catch(e){throw _printDatetime("User failed to update"),e}}async addContentsToContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Adding content to content group: "+t);try{var i=await _addContentsToContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content added to content group: "+t),i}catch(e){throw _printDatetime("Content failed to add to content group: "+t),e}}async createContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating content group: "+t);try{var e=await _createContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group created: "+t),e}catch(e){throw _printDatetime("Content group failed to create: "+t),e}}async deleteContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Deleting content group: "+t);try{var e=await _deleteContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group deleted: "+t),e}catch(e){throw _printDatetime("Content group failed to delete: "+t),e}}async getContentGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content group: "+t);try{var e=await _getContentGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Content group gotten: "+t),e}catch(e){throw _printDatetime("Content group failed to get: "+t),e}}async getContentGroups(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content groups");try{var e=await _getContentGroups(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Content groups gotten"),e}catch(e){throw _printDatetime("Content groups failed to get"),e}}async getPortalGroups(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting portal groups");try{var t=await _getPortalGroups(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Portal groups gotten"),t}catch(e){throw _printDatetime("Portal groups failed to get"),e}}async removeContentsFromContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing content from content group: "+t);try{var i=await _removeContentsFromContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content removed from content group: "+t),i}catch(e){throw _printDatetime("Content failed to remove from content group: "+t),e}}async renameContentGroup(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Renaming content group: "+t);try{var i=await _renameContentGroup(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group renamed: "+t),i}catch(e){throw _printDatetime("Content group failed to rename: "+t),e}}async shareContentGroupWithUsers(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Sharing content group with users: "+t);try{var i=await _shareContentGroupWithUsers(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group shared with users: "+t),i}catch(e){throw _printDatetime("Content group failed to share with users: "+t),e}}async stopSharingContentGroupWithUsers(t,e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Stopping sharing content group with users: "+t);try{var i=await _stopSharingContentGroupWithUsers(this.token,this.config.serviceApiUrl,t,e,this.debugMode);return _printDatetime("Content group stopped sharing with users: "+t),i}catch(e){throw _printDatetime("Content group failed to stop sharing with users: "+t),e}}async clearWatchlist(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Clearing watchlist");try{await _clearWatchlist(this.token,this.config.serviceApiUrl,this.id,this.debugMode),_printDatetime("Watchlist cleared")}catch(e){throw _printDatetime("Watchlist failed to clear"),e}}async clearContinueWatching(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Clearing continue watching");try{await _clearContinueWatching(this.token,this.config.serviceApiUrl,e,t,this.debugMode),_printDatetime("Continue watching cleared")}catch(e){throw _printDatetime("Continue watching failed to clear"),e}}async createForm(e,t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Creating form");try{var i=await _createForm(this.token,this.config.serviceApiUrl,e,t,this.debugMode);return _printDatetime("Form created"),i}catch(e){throw _printDatetime("Form failed to create"),e}}async getContentCookies(e){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting content cookies");try{var t=await _getContentCookies(this.token,this.config.serviceApiUrl,e,this.debugMode);return _printDatetime("Content cookies gotten"),t}catch(e){throw _printDatetime("Content cookies failed to get"),e}}async getDefaultSiteConfig(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting default site config");try{var e=await _getDefaultSiteConfig(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Default site config gotten"),e}catch(e){throw _printDatetime("Default site config failed to get"),e}}async getDynamicContent(t){null===this.token&&await this._init(),_printDatetime("Getting dynamic content: "+t);try{var e=await _getDynamicContent(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Dynamic content gotten: "+t),e}catch(e){throw _printDatetime("Dynamic content failed to get: "+t),e}}async getDynamicContents(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting dynamic contents");try{var e=await _getDynamicContents(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("Dynamic contents gotten"),e}catch(e){throw _printDatetime("Dynamic contents failed to get"),e}}async getMediaGroup(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting media group: "+t);try{var e=await _getMediaGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Media group gotten: "+t),e}catch(e){throw _printDatetime("Media group failed to get: "+t),e}}async getMediaItem(t){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting media item: "+t);try{var e=await _getMediaItem(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Media item gotten: "+t),e}catch(e){throw _printDatetime("Media item failed to get: "+t),e}}async getMyContent(){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is not available for portal API type.");_printDatetime("Getting my content");try{var e=await _getMyContent(this.token,this.config.serviceApiUrl,this.debugMode);return _printDatetime("My content gotten"),e}catch(e){throw _printDatetime("My content failed to get"),e}}async getMyGroup(t){null===this.token&&await this._init(),_printDatetime("Getting my group: "+t);try{var e=await _getMyGroup(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("My group gotten: "+t),e}catch(e){throw _printDatetime("My group failed to get: "+t),e}}async getSiteConfig(t){null===this.token&&await this._init(),_printDatetime("Getting site config: "+t);try{var e=await _getSiteConfig(this.token,this.config.serviceApiUrl,t,this.debugMode);return _printDatetime("Site config gotten: "+t),e}catch(e){throw _printDatetime("Site config failed to get: "+t),e}}async mediaSearch(e,t,i,a,n){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Searching media...");try{var o=await _mediaSearch(this.token,this.config.serviceApiUrl,e,t,i,a,n,this.debugMode);return _printDatetime("Media search complete"),o}catch(e){throw _printDatetime("Media search failed"),e}}async guestInvite(t,e,i,a){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Inviting guest");try{var n=await _guestInvite(this.token,this.config.serviceApiUrl,t,e,this.id,i,a,this.debugMode);return _printDatetime("Guest invited"),n}catch(e){throw _printDatetime("Guest failed to invite: "+t),e}}async participantPanelQuery(){null===this.token&&await this._init(),_printDatetime("Querying participant panel");try{var e=await _participantPanelQuery(this.token,this.config.serviceApiUrl,this.config.apiType,this.id,this.debugMode);return _printDatetime("Participant panel queried"),e}catch(e){throw _printDatetime("Participant panel failed to query"),e}}async registerGuest(t,e,i,a){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Registering guest: "+t);try{var n=await _registerGuest(this.token,this.config.serviceApiUrl,t,e,i,a,this.debugMode);return _printDatetime("Guest registered: "+t),n}catch(e){throw _printDatetime("Guest failed to register: "+t),e}}async removeGuest(t,e,i,a){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Removing guest");try{var n=await _removeGuest(this.token,this.config.serviceApiUrl,t,e,this.id,i,a,this.debugMode);return _printDatetime("Guest removed"),n}catch(e){throw _printDatetime("Guest failed to remove: "+t),e}}async getVideoTracking(t,e,i){if(null===this.token&&await this._init(),"portal"!==this.config.apiType)throw new Error("This function is only available for portal API type.");_printDatetime("Getting video tracking: "+t);try{await _getVideoTracking(this.token,this.config.serviceApiUrl,t,e,i,this.debugMode),_printDatetime("Video tracking gotten: "+t)}catch(e){throw _printDatetime("Video tracking failed to get: "+t),e}}async miscFunctions(t,i,a,n){null===this.token&&await this._init();try{let e=this.config.serviceApiUrl+"/"+t;n&&(e=(e=(e=e.replace("/api","")).replace("app-api.","")).replace("admin-app",""));var o=new Headers,r=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+this.token),this.debugMode&&(console.log(`URL: ${e}
METHOD: `+i),a)&&console.log("BODY: "+JSON.stringify(a,null,4)),{method:i,headers:o}),s=(a&&(r.body=JSON.stringify(a)),await fetch(e,r));if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"API call failed")}}}export default new NomadSDK(config);async function _cancelUpload(e,t,i,a){t+=`/asset/upload/${i}/cancel`,i=new Headers;i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Cancel asset upload failed")}}const MAX_CONCURRENT_PROMISES=8;async function _multiThreadUpload(a,n,o,e,r){var t=e.parts;const s=t.length;for(let e=0;e<s;e+=MAX_CONCURRENT_PROMISES){var i=t.slice(e,e+MAX_CONCURRENT_PROMISES).map(async(e,t)=>{console.log(`Uploading part ${t+1} of ${s}...`);var i=await _uploadPart(o,e,r);await _uploadPartComplete(a,n,e.id,i,r),console.log(`Uploaded part ${t+1} of ${s} successfully`)});await Promise.all(i)}}async function _startUpload(e,t,i,a,n,o,r,s,l,c,d,p){t+="/asset/upload/start";let h=c.size/1e4;h<20971520&&(h=20971520);var u=new Headers,e=(u.append("Content-Type","application/json"),u.append("Authorization","Bearer "+e),{displayName:i||c.originalname,contentLength:c.size,uploadOverwriteOption:l,relativePath:c.originalname,parentId:d,chunkSize:h,relatedContentId:r,languageId:s,existingAssetId:a,relatedAssetId:n,createTranscribeRelatedAsset:o});p&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var f=await fetch(t,{method:"POST",headers:u,body:JSON.stringify(e)});if(f.ok)return await f.json();throw await f.json()}catch(e){_apiExceptionHandler(e,"Start Upload Failed")}}async function _completeUpload(e,t,i,a){t+=`/asset/upload/${i}/complete`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Complete Upload Failed")}}async function _uploadPartComplete(e,t,i,a,n){t+=`/asset/upload/part/${i}/complete`,i={etag:a},a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var o=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(i)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Upload Part Complete Failed")}}import{Buffer}from"buffer";async function _uploadPart(e,i,a,n=3){for(let t=0;t<n;t++)try{var o=Buffer.from(e.buffer,"binary").toString("binary").slice(i.startingPostion,i.endingPosition+1),r=new Headers,s=(r.append("Accept","application/json, text/plain, */*"),a&&console.log(`URL: ${i.url}
METHOD: POST`),await fetch(i.url,{method:"PUT",headers:r,body:o}));if(s.ok)return s.headers.get("ETag");throw await s.json()}catch(e){if(!(t<n-1)){_apiExceptionHandler(e,"Upload Part Failed");break}console.error(`Upload attempt ${t+1} failed. Retrying...`)}}async function _getAudit(e,t,i,a){t=t+"/admin/audit/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Audit Failed")}}async function _clearServerCache(e,t,i){var t=t+"/config/clearServerCache",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:a});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Clear Server Cache Failed")}}async function _getConfig(e,t,i,a){t=t+"/config?configType="+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Config Failed")}}async function _getServerTime(e,t,i){var t=t+"/config/serverTime",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Server Time Failed")}}async function _addCustomProperties(e,t,i,a,n,o,r){t=t+"/admin/asset/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={displayName:a,displayDate:n,customProperties:o};r&&console.log(`URL: ${t}
METHOD: PATCH
BODY: `+JSON.stringify(e));try{var s=await fetch(t,{method:"PATCH",headers:i,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Adding Custom Properties Failed")}}async function _addRelatedContent(e,t,i,a,n,o){var t=t+"/admin/related",r=new Headers,e=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+e),{items:[{contentDefinition:n,contentId:i,relatedContentId:a}]});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Adding Related Content Failed")}}async function _addTagOrCollection(e,t,i,a,n,o,r,s,l){var t=t+`/admin/${i}/content`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{items:[{contentDefinition:n,contentId:a,name:o,createNew:s}]});null!=r&&(e.items[0][i+"Id"]=r),l&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var d=await fetch(t,{method:"POST",headers:c,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Adding Tag or Collection Failed")}}async function _createTagOrCollection(e,t,i,a,n){t=t+"/admin/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={name:a};n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Adding Tag or Collection Failed")}}async function _deleteRelatedContent(e,t,i,a,n,o){var t=t+"/admin/related/delete",r=new Headers,e=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+e),{items:[{contentDefinition:n,contentId:i,relatedContentId:a}]});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Deleting Related Content Failed")}}async function _deleteTagOrCollection(e,t,i,a,n){t=t+`/admin/${i}/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Tag or Collection Failed")}}async function _getTagOrCollection(e,t,i,a,n){t=t+`/admin/${i}/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Getting Tag or Collection Failed")}}async function _removeTagOrCollection(e,t,i,a,n,o,r){var t=t+`/admin/${i}/content/delete`,s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{items:[{contentDefinition:n,contentId:a}]});e.items[0][i+"Id"]=o,r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Removing Tag or Collection Failed")}}async function _createContent(e,t,i,a,n){let o=t+"/content/new?contentDefinitionId="+i;t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),a&&(o+="&language="+a),n&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:t});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Create Content Failed")}}async function _deactivateContentUserTrack(e,t,i,a,n,o,r){t=t+`/content/${n}/user-track/${a}/${i}/`+o,n=new Headers;n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),r&&console.log(`URL: ${t}
METHOD: POST`);try{var s=await fetch(t,{method:"POST",headers:n});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Deactivate User Track Failed")}}async function _deleteContent(e,t,i,a,n){t=t+`/content/${i}?contentDefinitionId=`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e);try{n&&console.log(`URL: ${t}
METHOD: DELETE`);var o=await fetch(t,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Content Failed")}}async function _getContentUserTrackTouch(e,t,i,a,n){t+=`/content/${a}/user-track/${i}/touch`,a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:a});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Get Content User Track Touch Failed")}}async function _getContentUserTrack(e,t,i,a,n,o,r,s,l){t=new URL(t+`/content/${a}/user-track/`+i),a=new URLSearchParams,a.append("sortColumn",n),a.append("isDesc",o),a.append("pageIndex",r),a.append("sizeIndex",s),t.search=a.toString(),i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),l&&console.log(`URL: ${t}
METHOD: GET`);try{var c=await fetch(t,{method:"GET",headers:i});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Get Content User Track Failed")}}async function _getContent(e,t,i,a,n,o){let r=t+`/content/${i}?contentDefinitionId=`+a;n&&(r+="&isRevision="+n);t=new Headers;t.append("Authorization","Bearer "+e),t.append("Content-Type","application/json"),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:t});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Get Content Failed")}}import deepEqual from"deep-equal";async function _updateContent(e,t,i,a,n,o,r){var s=t+"/content/"+i,l=new Headers;l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e);let c=null;try{(c=await _getContent(e,t,i,a,null,r)).contentDefinitionId!==a&&(c.contentDefinitionId=a),c.contentId!==i&&(c.contentId=i),c.languageId!==o&&(c.languageId=o),_updateProperties(c,n)}catch(e){c={contentDefinitionId:a,contentId:i,languageId:o,properties:n}}r&&console.log(`URL: ${s}
METHOD: PUT
BODY: `+JSON.stringify(c,null,4));try{var d=await fetch(s,{method:"PUT",headers:l,body:JSON.stringify(c)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Update Content Failed")}}function _updateProperties(t,i){for(const a in i)if(Array.isArray(i[a]))for(let e=0;e<i[a].length;++e)deepEqual(t.properties[a][e],i[a][e])||(t.properties[a][e]=i[a][e]);else"object"==typeof i[a]?deepEqual(t.properties[a],i[a])||(t.properties[a]=i[a]):t.properties[a]!==i[a]&&(t.properties[a]=i[a])}async function _addLiveScheduleToEvent(e,t,i,a,n,o,r,s,l,c,d,p,h,u){var t=t+"/admin/liveSchedule",f=new Headers,e=(f.append("Content-Type","application/json"),f.append("Authorization","Bearer "+e),{contentId:i,slateVideo:null!==a?a:"",prerollVideo:null!==n?n:"",postrollVideo:null!==o?o:"",isSecureOutput:null!==r&&r,archiveFolderAsset:null!==s?s:"",primaryLiveInput:null!==l?l:"",backupLiveInputId:null!==c?c:"",primaryLivestreamInputUrl:null!==d?d:"",backupLivestreamInputUrl:null!==p?p:"",externalOutputProfiles:null!==h?h:""});u&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var g=await fetch(t,{method:"POST",headers:f,body:JSON.stringify(e)});if(!g.ok)throw await g.json()}catch(e){_apiExceptionHandler(e,"Adding Live Schedule to Event Failed")}}async function _createAndUpdateEvent(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y,w,m,v,_,T,D,E,S,C,O,A,k,U){var I=new Headers;if(I.append("Content-Type","application/json"),I.append("Authorization","Bearer "+e),null===i){e=t+"/content/new?contentDefinitionId="+a;U&&console.log(`URL: ${e}
METHOD: GET`);try{var H=await fetch(e,{method:"GET",headers:I});if(!H.ok)throw await H.json();i=(await H.json()).contentId}catch(e){_apiExceptionHandler(e,"Get Content ID Failed")}}e=t+"/content/"+i,H={contentId:i,contentDefinitionId:a,properties:{contentRatings:null!==O?O:"",disabled:null!==A&&A,endDatetime:s,externalUrl:null!==g?g:"",featuredGroups:null!==D?D:[],genres:null!==m?m:[],groupSequence:null!==E?E:"",heroImage:null!==h?h:"",intelligentProgram:null!==f?f:"",languages:null!==_?_:[],liveChannel:null!==k?k:"",logoImage:null!==u?u:"",longDescription:null!==d?d:"",mediaAttributes:null!==v?v:[],name:n,performers:null!==w?w:[],primaryPerformer:null!==l?l:"",products:null!==T?T:[],recommendationSimilarItems:null!==C?C:[],relatedMediaItems:null!==S?S:[],routeName:_slugify(n),series:null!==o?o:"",shortDescription:null!==c?c:"",startDatetime:r,thumbnailImage:null!==p?p:"",venue:null!==y?y:""}};U&&console.log(`URL: ${e}
METHOD: PUT
BODY: `+JSON.stringify(H,null,4));try{var L=await fetch(e,{method:"PUT",headers:I,body:JSON.stringify(H)});if(L.ok)return await L.json();throw await L.json()}catch(e){_apiExceptionHandler(e,"Create and Update Event Instance Failed")}}async function _deleteEvent(e,t,i,a,n){t=t+`/content/${i}?contentDefinitionId=`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Event Failed")}}async function _extendLiveSchedule(e,t,i,a,n,o,r){t+=`/admin/liveSchedule/content/${i}/copy`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={endDate:null!==o?o:"",recurringDays:a,recurringWeeks:n,timeZoneOffsetSeconds:-60*(new Date).getTimezoneOffset()};r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Extending Live Schedule Failed")}}async function _getLiveSchedule(e,t,i,a){t=t+"/admin/liveSchedule/content/"+i,i=new Headers;i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(!n.ok)throw await n.json();try{return await n.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Live Schedule Failed")}}async function _startLiveSchedule(e,t,i,a){t+=`/admin/liveSchedule/content/${i}/start`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Start Live Schedule Failed")}}async function _stopLiveSchedule(e,t,i,a){t+=`/admin/liveSchedule/content/${i}/stop`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Stop Live Schedule Failed")}}async function _createLiveChannel(e,t,i,a,n,o,r,s,l,c,d,p,h,u){var f=t+"/liveChannel",g=new Headers,i=(g.append("Content-Type","application/json"),g.append("Authorization","Bearer "+e),{name:i,routeName:_slugify(i),enableHighAvailability:o,enableLiveClipping:r,externalOutputProfiles:p,isSecureOutput:s,outputScreenshots:l,type:{id:_LIVE_CHANNEL_TYPES[c],descrption:c}});a&&(i.thumbnailImage={id:a}),n&&(i.archiveFolderAsset={id:n}),"External"===c&&(i.externalUrl=d),h&&(o=await _getSecurityGroups(e,t,u),i.securityGroups=o.filter(e=>h.includes(e.description)).map(e=>({description:e.description,id:e.id}))),u&&console.log(`URL: ${f}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var y,w=await fetch(f,{method:"POST",headers:g,body:JSON.stringify(i)});if(w.ok)return await _waitForLiveChannelStatus(e,t,(y=await w.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,u),y;throw await w.json()}catch(e){_apiExceptionHandler(e,"Create Live Channel Failed")}}async function _deleteLiveChannel(t,e,i,a,n){e=e+"/liveChannel/"+i;let o=null;o=!0===a?(n&&console.log("Getting Live Channel Inputs IDs..."),await _getLiveChannelInputsIds(t,i)):null;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+t),n&&console.log(`URL: ${e}
METHOD: DELETE`);try{var r=await fetch(e,{method:"DELETE",headers:i});if(!r.ok)throw await r.json();if(a&&o&&0<o.length){n&&console.log("Deleting Live Channel Live Inputs...");for(let e=0;e<o.length;e++)await _deleteLiveInput(t,o[e])}}catch(e){_apiExceptionHandler(e,"Delete Live Channel Failed")}}async function _getLiveChannelInputsIds(e,t,i,a){const n=[];a&&console.log("Getting Live Channel Schedule Events...");e=await _getLiveChannelScheduleEvents(e,t,i,a);return e&&0<e.length&&e.forEach(e=>{e&&e.liveInput&&null!=e.liveInput&&e.liveInput.lookupId&&n.push(e.liveInput.lookupId)}),n}async function _getLiveChannelScheduleEvents(e,t,i,a){t+=`/liveChannel/${i}/liveScheduleEvent`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Channel Schedule Events Failed")}}async function _getLiveChannelStatusMessage(e,t,i,a){a&&console.log("Getting Live Channel...");e=await _getLiveChannel(e,t,i,a);return!!(e&&e.statusMessages&&0<e.statusMessages.length)&&e.statusMessages[0]}async function _getLiveChannelStatus(e,t,i,a){a&&console.log("Getting Live Channel...");e=await _getLiveChannel(e,t,i,a);return e?e.status.description:"Deleted"}async function _getLiveChannel(e,t,i,a){t=t+"/liveChannel/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Channel Failed")}}async function _getLiveChannels(e,t,i){var t=t+"/liveChannel",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Channels Failed")}}async function _getSecurityGroups(e,t,i){var t=t+"/lookup/22?lookupKey=99e8767a-00ba-4758-b9c2-e07b52c47016",a=new Headers;a.append("Authorization","Bearer "+e),a.append("Content-Type","application/json"),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return(await n.json()).items;throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Security Groups Failed")}}async function _liveChannelRefresh(e,t,i){var t=t+"/liveChannel/refresh",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:a});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Refresh Live Channel Failed")}}const _SECURITY_GROUPS={"Content Manager":"e81e25ba-b6ab-4676-980c-f51385008eb3",Everyone:"740ea96a-9c15-4c2e-ba1a-050ea893514b",Guest:"8354ce06-deeb-4da9-a190-af0eca8d9f56"},_LIVE_CHANNEL_STATUSES={CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Error:"Error",Idle:"Idle",New:"New",Pause:"Pause",Recovering:"Recovering",Running:"Running",Starting:"Starting",Stopping:"Stopping",Unmanaged:"Unmanaged",UpdateFailed:"Update Failed",Updating:"Updating"},_LIVE_CHANNEL_TYPES={External:"2bf01dd4-0a9c-4168-a61b-27e135732103",IVS:"2bf01dd4-0a9c-4168-a61b-27e135732102",Normal:"2bf01dd4-0a9c-4168-a61b-27e135732100",Realtime:"2bf01dd4-0a9c-4168-a61b-27e135732104"};async function _nextEvent(e,t,i,a){t+=`/liveChannel/${i}/nextEvent`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Start Output Tracking Failed")}}async function _startLiveChannel(e,t,i,a){var n=t+`/liveChannel/${i}/start`,o=new Headers;o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),a&&console.log(`URL: ${n}
METHOD: POST`);try{var r=await fetch(n,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(e,t,i,_LIVE_CHANNEL_STATUSES.Running,1200,20)}catch(e){_apiExceptionHandler(e,"Start Live Channel Failed")}}async function _startOutputTracking(e,t,i,a){t+=`/liveChannel/${i}/startOutputTracking`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Start Output Tracking Failed")}}async function _stopLiveChannel(e,t,i,a){var n=t+`/liveChannel/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+e),a&&console.log(`URL: ${n}
METHOD: POST`);try{var r=await fetch(n,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveChannelStatus(e,t,i,_LIVE_CHANNEL_STATUSES.Idle,1200,20,a)}catch(e){_apiExceptionHandler(e,"Stop Live Channel Failed")}}async function _updateLiveChannel(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f){var i=await _getLiveChannel(e,t,i,f),g=t+"/liveChannel",y=new Headers;y.append("Content-Type","application/json"),y.append("Authorization","Bearer "+e);a&&a!==i.name&&(i.name=a,i.routeName=_slugify(a)),n&&n!==i.thumbnailImage&&(i.thumbnailImage={id:n}),o&&o!==i.archiveFolderAsset.id&&(i.archiveFolderAsset={id:o}),r&&r!==i.enableHighAvailability&&(i.enableHighAvailability=r),s&&s!==i.enableLiveClipping&&(i.enableLiveClipping=s),l&&l!==i.isSecureOutput&&(i.isSecureOutput=l),c&&c!==i.outputScreenshots&&(i.outputScreenshots=c),d&&_LIVE_CHANNEL_STATUSES[d]!==i.type.id&&(i.type={id:_LIVE_CHANNEL_TYPES[d]}),h&&h!==i.externalOutputProfiles&&(i.externalOutputProfiles=h),"External"===d?p&&p!==i.externalUrl&&(i.externalUrl=p):p&&i.externalUrl&&delete i.externalUrl,u&&(a=(await _getSecurityGroups(e,t,f)).filter(e=>u.includes(e.description)).map(e=>({description:e.description,id:e.id})))!==i.securityGroups&&(i.securityGroups=a),f&&console.log(`URL: ${g}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var w,m=await fetch(g,{method:"PUT",headers:y,body:JSON.stringify(i)});if(m.ok)return await _waitForLiveChannelStatus(e,t,(w=await m.json()).id,_LIVE_CHANNEL_STATUSES.Idle,120,2,f),w;throw await m.json()}catch(e){_apiExceptionHandler(e,"Updating Live Channel Failed")}}async function _waitForLiveChannelStatus(e,t,i,a,n=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<n;){var c=await _getLiveChannelStatus(e,t,i,r);if(c===a)return void(r&&console.log(`Live Channel [${i}] transitioned to status [${a}]`));if(console.log(`Live Channel [${i}] current status is [${c}]`),"Error"===c)throw c=await _getLiveChannelStatusMessage(e,t,i,r),new Error(`Live Channel [${i}] is in [Error] status: `+c);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Channel [${i}] to transition to status [${a}]... [${Math.round(l)}/${n}]`),l>n)break;await _sleep(o)}throw new Error(`Waiting for Live Channel [${i}] to transition to status [${a}] timed out`)}async function _createLiveInput(e,t,i,a,n,o,r,s,l,c){var d=t+"/liveInput",p=new Headers,i=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+e),{name:i,internalName:_slugify(i),type:{id:_LIVE_INPUT_TYPES[n],description:n}});"RTMP_PUSH"==n?a&&(i.sourceCidr=a):"RTMP_PULL"!==n&&"RTP_PUSH"!==n&&"URL_PULL"!==n||a&&(i.sources=[{url:a}]),o&&(i.isStandard=o),r&&(i.videoAsset={id:r}),s&&(i.destinations=s),l&&(i.sources=l),c&&console.log(`URL: ${d}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var h=await fetch(d,{method:"POST",headers:p,body:JSON.stringify(i)}),u=await h.json();if(h.ok)return await _waitForLiveInputStatus(e,t,u.id,_LIVE_INPUT_STATUSES.Detached,15,1,c),u;throw await h.json()}catch(e){_apiExceptionHandler(e,"Creating Live Input Failed")}}async function _deleteLiveInput(e,t,i,a){t=t+"/liveInput/"+i,i=new Headers;i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete Live Input Failed")}}async function _getLiveInputStatusMessage(e,t,i,a){a&&console.log("Getting Live Input...");e=await _getLiveInput(e,t,i,a);return e&&e.statusMessage&&e.statusMessage?e.statusMessage:""}async function _getLiveInputStatus(e,t,i,a){a&&console.log("Getting Live Input...");e=await _getLiveInput(e,t,i,a);return e?e.status.description:"Deleted"}async function _getLiveInput(e,t,i,a){t=t+"/liveInput/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Input Failed")}}async function _getLiveInputs(e,t,i){var t=t+"/liveInput",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Inputs Failed")}}const _LIVE_INPUT_STATUSES={Attached:"Attached",Attaching:"Attaching",CreateFailed:"Create Failed",Creating:"Creating",Deleted:"Deleted",Deleting:"Deleting",Detached:"Detached",Detaching:"Detaching",Error:"Error",Paused:"Paused",Updating:"Updating"},_LIVE_INPUT_TYPES={RTMP_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1254",RTMP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1253",RTP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1252",UDP_PUSH:"78acb07d-ba87-48fa-ad8f-c00e318a1251",URL_PULL:"78acb07d-ba87-48fa-ad8f-c00e318a1255"};async function _updateLiveInput(e,t,i,a,n,o,r,s,l,c,d){var i=await _getLiveInput(e,t,i,d),p=t+"/liveInput",h=new Headers;h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+e);a&&a!==i.name&&(i.name=a,i.internalName=_slugify(a)),o&&_LIVE_INPUT_TYPES[o]!==i.type.id&&(i.type={id:_LIVE_INPUT_TYPES[o]}),"RTMP_PUSH"==o?(n&&n!==i.sourceCidr&&(i.sourceCidr=n),i.sources&&delete i.sources):"RTMP_PULL"===o||"RTP_PUSH"===o||"URL_PULL"===o?(n&&n!==i.sources&&(i.sources=[{url:n}]),i.sourceCidr&&delete i.sourceCidr):(i.sourceCidr&&delete i.sourceCidr,i.sources&&delete i.sources),r&&r!==i.isStandard&&(i.isStandard=r),s&&s!==i.videoAsset.id&&(i.videoAsset={id:s}),l&&l!==i.destinations&&(i.destinations=l),c&&c!==i.SOURCES&&(i.sources=c),d&&console.log(`URL: ${p}
METHOD: PUT
BODY: `+JSON.stringify(i,null,4));try{var u,f=await fetch(p,{method:"PUT",headers:h,body:JSON.stringify(i)});if(f.ok)return await _waitForLiveInputStatus(e,t,(u=await f.json()).id,_LIVE_INPUT_STATUSES.Detached,15,1,d),u;throw await f.json()}catch(e){_apiExceptionHandler(e,"Updating Live Input Failed")}}async function _waitForLiveInputStatus(e,t,i,a,n=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<n;){var c=await _getLiveInputStatus(e,t,i,r);if(c===a)return void(r&&console.log(`Live Input ${i} transitioned to status `+a));if(console.log(`Live Input [${i}] is in status [${c}]`),"Error"===c)throw c=await _getLiveInputStatusMessage(e,i,r),new Error(`Live Input ${i} is in Error status: `+c);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Input [${i}] to transition to status [${a}]... [${Math.round(l)}/${n}]`),l>n)break;await _sleep(o)}throw new Error(`Waiting for Live Input [${i}] to transition to status [${a}] timed out`)}async function _cancelBroadcast(e,t,i,a){var n=t+`/admin/liveOperator/${i}/cancel`,o=new Headers;o.append("Authorization","Bearer "+e),o.append("Content-Type","application/json"),a&&console.log(`URL: ${n}
METHOD: POST`);try{var r=await fetch(n,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(e,t,i,"Idle",1200,20)}catch(e){_apiExceptionHandler(e,"Cancel Broadcast Failed")}}async function _cancelSegment(e,t,i,a){t+=`/admin/liveOperator/${i}/cancelSegment`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Cancel Segment Failed")}}async function _completeSegment(e,t,i,a,n,o){var t=t+`/admin/liveOperator/${i}/completeSegment`,r=new Headers,e=(r.append("Authorization","Bearer "+e),r.append("Content-Type","application/json"),{liveOperatorId:i});a&&Array.isArray(a)&&0<a.length&&(e.relatedContent=a.map(e=>({id:e}))),n&&Array.isArray(n)&&0<n.length&&(e.tags=n.map(e=>({id:e}))),o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Complete Segment Failed")}}async function _getCompletedSegments(e,t,i,a){t+=`/admin/liveOperator/${i}/segments`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Completed Segments Failed")}}async function _getLiveOperator(e,t,i,a){t=t+"/admin/liveOperator/"+i,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Operator Failed")}}async function _getLiveOperators(e,t,i){var t=t+"/admin/liveOperator",a=new Headers;a.append("Authorization","Bearer "+e),a.append("Content-Type","application/json"),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Live Operators Failed")}}async function _startBroadcast(e,t,i,a,n,o,r,s,l){var c=t+"/admin/liveOperator/start",d=new Headers,p=(d.append("Authorization","Bearer "+e),d.append("Content-Type","application/json"),{id:i});a&&(p.prerollAsset={id:a}),n&&(p.postrollAsset={id:n}),o&&(p.liveInput={id:o}),r&&Array.isArray(r)&&0<r.length&&(p.relatedContent=r.map(e=>({id:e}))),s&&Array.isArray(s)&&0<s.length&&(p.tags=s.map(e=>({id:e}))),l&&console.log(`URL: ${c}
METHOD: POST
BODY: `+JSON.stringify(p,null,4));try{var h=await fetch(c,{method:"POST",headers:d,body:JSON.stringify(p)});if(!h.ok)throw await h.json();await _waitForLiveOperatorStatus(e,t,i,"Running",1200,20)}catch(e){_apiExceptionHandler(e,"Start Broadcast Failed")}}async function _startSegment(e,t,i,a){t+=`/admin/liveOperator/${i}/startSegment`,i=new Headers;i.append("Authorization","Bearer "+e),i.append("Content-Type","application/json"),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Start Segment Failed")}}async function _stopBroadcast(e,t,i,a){var n=t+`/admin/liveOperator/${i}/stop`,o=new Headers;o.append("Authorization","Bearer "+e),o.append("Content-Type","application/json"),a&&console.log(`URL: ${n}
METHOD: POST`);try{var r=await fetch(n,{method:"POST",headers:o});if(!r.ok)throw await r.json();await _waitForLiveOperatorStatus(e,t,i,"Idle",1200,20)}catch(e){_apiExceptionHandler(e,"Stop Broadcast Failed")}}async function _waitForLiveOperatorStatus(e,t,i,a,n=30,o=2,r){var s=(new Date).getTime();let l=0;for(;l<n;){var c=(await _getLiveOperator(e,t,i,r)).liveChannelStatus.description;if(c===a)return void(r&&console.log(`Live Operator ${i} transitioned to status `+a));if(console.log(`Live Operator [${i}] is in status [${c}]`),"Error"===c)throw new Error(`Live Operator ${i} is broken`);if(l=((new Date).getTime()-s)/1e3,r&&console.log(`Waiting for Live Operator [${i}] to transition to status [${a}]... [${Math.round(l)}/${n}]`),l>n)break;await _sleep(o)}throw new Error(`Waiting for Live Operator [${i}] to transition to status [${a}] timed out`)}async function _addAssetScheduleEvent(e,t,i,a,n,o,r,s){var t=t+`/LiveChannel/${i}/liveScheduleEvent`,l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{isLoop:n,channelId:i,durationTimeCode:o,previousId:r,type:{id:_eventType.videoAsset,description:"Video Asset"},asset:a});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return(await c.json()).changeList[0];throw await c.json()}catch(e){_apiExceptionHandler(e,"Adding Asset Schedule Event Failed")}}async function _addInputScheduleEvent(e,t,i,a,n,o,r,s){var t=t+`/LiveChannel/${i}/liveScheduleEvent`,l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{channelId:i,fixedOnAirTimeUtc:o,type:{id:_eventType.liveInput,description:"Live Input"},liveInput:a,previousId:r});n&&(e.liveInput2=n),s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return(await c.json()).changeList[0];throw await c.json()}catch(e){_apiExceptionHandler(e,"Adding Input Schedule Event Failed")}}const _eventType={liveInput:"eef7ef23-56dc-4f48-8c0e-1f4d52990405",videoAsset:"eef7ef23-56dc-4f48-8c0e-1f4d52990404"};async function _getAssetScheduleEvent(e,t,i,a,n){t=t+`/liveChannel/${i}/liveScheduleEvent/`+a,i=new Headers;i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(!o.ok)throw await o.json();try{return await o.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Asset Schedule Event Failed")}}async function _getInputScheduleEvent(e,t,i,a,n){t=t+`/liveChannel/${i}/liveScheduleEvent/`+a,i=new Headers;i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(!o.ok)throw await o.json();try{return await o.json()}catch(e){return!1}}catch(e){_apiExceptionHandler(e,"Get Asset Schedule Event Failed")}}async function _moveScheduleEvent(e,t,i,a,n,o){t+=`/liveChannel/${i}/liveScheduleEvent/${a}/move`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a={previousScheduleEventId:n};o&&console.log(`URL: ${t}
METHOD: DELETE`);try{var r=await fetch(t,{method:"PUT",headers:i,body:JSON.stringify(a)});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Move Live Schedule Event Failed")}}async function _removeAssetScheduleEvent(e,t,i,a,n){t=t+`/LiveChannel/${i}/liveScheduleEvent/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Remove Asset Schedule Event Failed")}}async function _removeInputScheduleEvent(e,t,i,a,n){t=t+`/liveChannel/${i}/liveScheduleEvent/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"delete",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Remove Input Schedule Event Failed")}}async function _updateAssetScheduleEvent(e,t,i,a,n,o,r,s){var l=await _getAssetScheduleEvent(e,t,a,i,s),t=t+`/LiveChannel/${a}/liveScheduleEvent`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{type:{id:_eventType.videoAsset,description:"Video Asset"}});e.id=i&&i!==l.id?i:l.id,e.isLoop=o&&o!==l.isLoop?o:l.isLoop,e.channelId=a&&a!==l.channelId?a:l.channelId,e.durationTimeCode=r&&r!==l.durationTimeCode?r:l.durationTimeCode,e.asset=n&&n!==l.asset?n:l.asset,s&&console.log(`URL: ${t}
METHOD: PUT
BODY: `+JSON.stringify(e,null,4));try{var d=await fetch(t,{method:"PUT",headers:c,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Updating Asset Schedule Event Failed")}}async function _updateInputScheduleEvent(e,t,i,a,n,o,r,s){var l=await _getInputScheduleEvent(e,t,a,i,s),t=t+`/LiveChannel/${a}/liveScheduleEvent`,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),{type:{id:_eventType.liveInput,description:"Live Input"}});e.id=i&&i!==l.id?i:l.id,e.channelId=a&&a!==l.channelId?a:l.channelId,e.fixedOnAirTimeUtc=r&&r!==l.fixedOnAirTimeUtc?r:l.fixedOnAirTimeUtc,e.liveInput=n&&n!==l.liveInput?n:l.liveInput,e.liveInput2=o&&o!==l.liveInput2?o:l.liveInput2,s&&console.log(`URL: ${t}
METHOD: PUT
BODY: `+JSON.stringify(e,null,4));try{var d=await fetch(t,{method:"PUT",headers:c,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Updating Input Schedule Event Failed")}}async function _createIntelligentPlaylist(t,i,e,a,n,o,r,s,l,c,d,p,h){var u=i+"/admin/schedule",f=new Headers,o=(f.append("Content-Type","application/json"),f.append("Authorization","Bearer "+t),{name:o,scheduleType:"4",thumbnailAsset:p});h&&console.log(`URL: ${u}
METHOD: POST
BODY: `+JSON.stringify(o));let g=null;try{var y=await fetch(u,{method:"POST",headers:f,body:JSON.stringify(o)});if(!y.ok)throw await y.json();g=await y.json()}catch(e){_apiExceptionHandler(e,"Create Intelligent Playlist Failed")}p=u+`/${g.id}/item`,o={collections:e,endSearchDate:a,endSearchDurationInMinutes:n,relatedContent:r,scheduleItemType:"2",searchDate:s,searchDurationInMinutes:l,searchFilterType:c,sourceType:"2",tags:d};h&&console.log(`URL: ${p}
METHOD: POST
BODY: `+JSON.stringify(o));try{var w=await fetch(p,{method:"POST",headers:f,body:JSON.stringify(o)});if(!w.ok)throw await w.json();var m,v=await w.json();for(m in g)v[m]=g[m];return v}catch(e){await _deleteIntelligentSchedule(t,i,g.id,h),_apiExceptionHandler(e,"Create Intelligent Playlist Failed")}}async function _createIntelligentSchedule(e,t,i,a,n,o,r){var t=t+"/admin/schedule",s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{defaultVideoAsset:i,name:a,scheduleType:3,thumbnailAsset:n,timeZoneId:o});r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Create Intelligent Schedule Failed")}}async function _createPlaylistVideo(e,t,i,a,n,o){t+=`/admin/schedule/${i}/item`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={asset:a,previousItem:n};o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var r=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Create Schedule Item Failed")}}async function _createPlaylist(e,t,i,a,n,o,r){var t=t+"/admin/schedule",s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{defaultVideoAsset:o,loopPlaylist:n,name:i,scheduleType:"1",thumbnailAsset:a});r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Create Playlist Failed")}}async function _createScheduleItemAsset(e,t,i,a,n,o,r,s,l,c){t+=`/admin/schedule/${i}/item`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={asset:a,days:n,durationTimeCode:o,endTimeCode:r,previousItem:s,scheduleItemType:"1",sourceType:"3",timeCode:l};c&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var d=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Create Schedule Item Failed")}}async function _createScheduleItemLiveChannel(e,t,i,a,n,o,r,s,l,c){t+=`/admin/schedule/${i}/item`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={days:a,durationTimeCode:n,endTimeCode:o,liveChannel:r,previousItem:s,scheduleItemType:"1",sourceType:"4",timeCode:l};c&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var d=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Create Schedule Item Failed")}}async function _createScheduleItemSearchFilter(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y){t+=`/admin/schedule/${i}/item`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={collections:a,days:n,durationTimeCode:o,endSearchDate:r,endSearchDuratonInMinutes:s,endTimeCode:l,previousItem:c,relatedContent:d,scheduleItemType:"1",searchDate:p,searchDurationInMinutes:h,searchFilterType:u,sourceType:"2",tags:f,timeCode:g};y&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var w=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(w.ok)return await w.json();throw await w.json()}catch(e){_apiExceptionHandler(e,"Create Schedule Item Failed")}}async function _createScheduleItemPlaylistSchedule(e,t,i,a,n,o,r,s,l,c){t+=`/admin/schedule/${i}/item`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={days:a,durationTimeCode:n,endTimeCode:o,playlistSchedule:r,previousItem:s,scheduleItemType:"2",sourceType:"1",timeCode:l};c&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var d=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Create Schedule Item Failed")}}async function _deleteIntelligentPlaylist(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete Intelligent Playlist Failed")}}async function _deleteIntelligentSchedule(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete Intelligent Schedule Failed")}}async function _deletePlaylist(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete Playlist Failed")}}async function _deleteScheduleItem(e,t,i,a,n){t=t+`/admin/schedule/${i}/item/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: DELETE`);try{var o=await fetch(t,{method:"DELETE",headers:i});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Delete Schedule Item Failed")}}async function _generateSchedule(e,t,i,a){t+=`/admin/schedule/${i}/generate`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Generate Schedule Failed")}}async function _getIntelligentPlaylist(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Intelligent Playlist Failed")}}async function _getIntelligentSchedule(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Schedule Failed")}}async function _getPlaylist(e,t,i,a){t=t+"/admin/schedule/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Playlist Failed")}}async function _getScheduleItem(e,t,i,a,n){t=t+`/admin/schedule/${i}/item/`+a,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: GET`);try{var o=await fetch(t,{method:"GET",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Get Schedule Item Failed")}}async function _getScheduleItems(e,t,i,a){t+=`/admin/schedule/${i}/items`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Schedule Items Failed")}}async function _getSchedulePreview(e,t,i,a){t+=`/admin/schedule/${i}/preview`,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Schedule Preview Failed")}}async function _moveScheduleItem(e,t,i,a,n,o){t+=`/admin/schedule/${i}/item/${a}/move`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={id:a,previousItem:n};o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var r=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Move Schedule Items Failed")}}async function _publishIntelligentSchedule(e,t,i,a,n){t+=`/admin/schedule/${i}/publish`,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={numberOfLockedDays:a};n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Publish Schedule Failed")}}async function _startSchedule(e,t,i,a,n){t=t+`/admin/schedule/${i}/start`+(null!==a?"?skipCleanupOnFailure="+a:""),i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var o=await fetch(t,{method:"POST",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Start Schedule Failed")}}async function _stopSchedule(e,t,i,a,n){t=t+`/admin/schedule/${i}/stop`+(null!==a?"?forceStop="+a:""),i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var o=await fetch(t,{method:"POST",headers:i});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Stop Schedule Failed")}}async function _updateIntelligentPlaylist(e,t,i,a,n,o,r,s,l,c,d,p,h,u){var f=t+"/admin/schedule/"+i,g=new Headers,y=(g.append("Content-Type","application/json"),g.append("Authorization","Bearer "+e),await _getIntelligentPlaylist(e,t,i,u)),r={name:r||y.name,scheduleType:"4",thumbnailAsset:h||y.thumbnailAsset,scheduleStatus:y.scheduleStatus,status:y.status};u&&console.log(`URL: ${f}
METHOD: PUT
BODY: `+JSON.stringify(r));let w=null;try{var m=await fetch(f,{method:"PUT",headers:g,body:JSON.stringify(r)});if(!m.ok)throw await m.json();w=await m.json()}catch(e){_apiExceptionHandler(e,"Update Intelligent Playlist Failed")}const v=await _getScheduleItems(e,t,i,u);h=v[0],y=f+"/item/"+h.id,r={id:h.id,collections:0===a.length?h.collections:a,endSearchDate:n||h.endSearchDate,endSearchDurationInMinutes:o||h.endSearchDurationInMinutes,relatedContent:0===s?h.relatedContent:s,scheduleItemType:"2",searchDate:l||h.searchDate,searchDurationInMinutes:c||h.searchDurationInMinutes,searchFilterType:d||h.searchFilterType,sourceType:"2",tags:0===p.length?h.tags:p};u&&console.log(`URL: ${y}
METHOD: PUT
BODY: `+JSON.stringify(r));try{var _,T=await fetch(y,{method:"PUT",headers:g,body:JSON.stringify(r)});if(!T.ok)throw await T.json();const v=await T.json();for(_ in w)v[_]=w[_];return v}catch(e){_apiExceptionHandler(e,"Update Intelligent Playlist Failed")}}async function _updateIntelligentSchedule(e,t,i,a,n,o,r,s){var l=t+"/admin/schedule/"+i,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),await _getIntelligentSchedule(e,t,i,s)),t={defaultVideoAsset:a||e.defaultVideoAsset,id:i,name:n||e.name,scheduleType:3,thumbnailAsset:o||e.thumbnailAsset,timeZoneId:r||e.timeZoneId};s&&console.log(`URL: ${l}
METHOD: PUT
BODY: `+JSON.stringify(t));try{var d=await fetch(l,{method:"PUT",headers:c,body:JSON.stringify(t)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Update Intelligent Schedule Failed")}}async function _updatePlaylist(e,t,i,a,n,o,r,s){var l=t+"/admin/schedule/"+i,c=new Headers,e=(c.append("Content-Type","application/json"),c.append("Authorization","Bearer "+e),await _getPlaylist(e,t,i,s)),t={defaultVideoAsset:a||e.defaultVideoAsset,id:i,loopPlaylist:null===n?e.loopPlaylist:n,name:o||e.name,scheduleType:"1",thumbnailAsset:r||e.thumbnailAsset};s&&console.log(`URL: ${l}
METHOD: POST
BODY: `+JSON.stringify(t));try{var d=await fetch(l,{method:"PUT",headers:c,body:JSON.stringify(t)});if(d.ok)return await d.json();throw await d.json()}catch(e){_apiExceptionHandler(e,"Update Playlist Failed")}}async function _updateScheduleItemAsset(e,t,i,a,n,o,r,s,l,c){var d=t+`/admin/schedule/${i}/item/`+a,p=new Headers,e=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+e),await _getScheduleItem(e,t,i,a,c)),t={asset:n||e.asset,days:o||e.days,durationTimeCode:r||e.durationTimeCode,endTimeCode:s||e.endTimeCode,id:a,scheduleItemType:"1",sourceType:"3",timeCode:l||e.timeCode};c&&console.log(`URL: ${d}
METHOD: PUT
BODY: `+JSON.stringify(t));try{var h=await fetch(d,{method:"PUT",headers:p,body:JSON.stringify(t)});if(h.ok)return await h.json();throw await h.json()}catch(e){_apiExceptionHandler(e,"Update Schedule Item Failed")}}async function _updateScheduleItemLiveChannel(e,t,i,a,n,o,r,s,l,c){var d=t+`/admin/schedule/${i}/item/`+a,p=new Headers,e=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+e),await _getScheduleItem(e,t,i,a,c)),t={days:n||e.days,durationTimeCode:o||e.durationTimeCode,endTimeCode:r||e.endTimeCode,id:a,liveChannel:s||e.liveChannel,scheduleItemType:"1",sourceType:"4",timeCode:l||e.timeCode};c&&console.log(`URL: ${d}
METHOD: PUT
BODY: `+JSON.stringify(t));try{var h=await fetch(d,{method:"PUT",headers:p,body:JSON.stringify(t)});if(h.ok)return await h.json();throw await h.json()}catch(e){_apiExceptionHandler(e,"Update Schedule Item Failed")}}async function _updateScheduleItemPlaylistSchedule(e,t,i,a,n,o,r,s,l,c){var d=t+`/admin/schedule/${i}/item/`+a,p=new Headers,e=(p.append("Content-Type","application/json"),p.append("Authorization","Bearer "+e),await _getScheduleItem(e,t,i,a,c)),t={days:n||e.days,durationTimeCode:o||e.durationTimeCode,endTimeCode:r||e.endTimeCode,id:a,playlistSchedule:s||e.playlistSchedule,scheduleItemType:"2",sourceType:"1",timeCode:l||e.timeCode};c&&console.log(`URL: ${d}
METHOD: PUT
BODY: `+JSON.stringify(t));try{var h=await fetch(d,{method:"PUT",headers:p,body:JSON.stringify(t)});if(h.ok)return await h.json();throw await h.json()}catch(e){_apiExceptionHandler(e,"Update Schedule Item Failed")}}async function _updateScheduleItemSearchFilter(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y){var w=t+`/admin/schedule/${i}/item/`+a,m=new Headers,e=(m.append("Content-Type","application/json"),m.append("Authorization","Bearer "+e),await _getScheduleItem(e,t,i,a,y)),t={collections:n||e.collections,days:o||e.days,durationTimeCode:r||e.durationTimeCode,endSearchDate:s||e.endSearchDate,endSearchDuratonInMinutes:l||e.endSearchDuratonInMinutes,endTimeCode:c||e.endTimeCode,id:a,relatedContent:d||e.relatedContent,scheduleItemType:"1",searchDate:p||e.searchDate,searchDurationInMinutes:h||e.searchDurationInMinutes,searchFilterType:u||e.searchFilterType,sourceType:"2",tags:f||e.tags,timeCode:g||e.timeCode};y&&console.log(`URL: ${w}
METHOD: PUT
BODY: `+JSON.stringify(t));try{var v=await fetch(w,{method:"PUT",headers:m,body:JSON.stringify(t)});if(v.ok)return await v.json();throw await v.json()}catch(e){_apiExceptionHandler(e,"Update Schedule Item Failed")}}async function _changeSessionStatus(e,t,i,a,n,o){var t=t+"/admin/user-session",r=new Headers,e=(r.append("Content-Type","application/json"),r.append("Authorization","Bearer "+e),{id:i,userSessionStatus:a,applicationId:n});o&&console.log(`URL: ${t}
METHOD: POST
BODY: `+e);try{var s=await fetch(t,{method:"POST",headers:r,body:e});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Change Session Status Failed")}}async function _getUserSession(e,t,i,a){t=t+"/admin/user-session/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get User Session Failed")}}async function _deleteUserContentAttributeData(e,t,i,a){t=t+"/admin/user/userContentAttribute/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Content Attribute Data Failed")}}async function _deleteUserContentGroupData(e,t,i,a){t=t+"/admin/user/contentGroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Content Group Data Failed")}}async function _deleteUserContentSecurityData(e,t,i,a,n,o,r,s,l,c){var t=t+"/admin/user/userContentSecurity/delete",d=new Headers,e=(d.append("Content-Type","application/json"),d.append("Authorization","Bearer "+e),{contentId:i,contentDefinitionId:a,userId:n,email:o,id:r,keyName:s,expirationDate:l});c&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var p=await fetch(t,{method:"POST",headers:d,body:JSON.stringify(e)});if(!p.ok)throw await p.json()}catch(e){_apiExceptionHandler(e,"Delete User Content Security Data Failed")}}async function _deleteUserData(e,t,i,a){t=t+"/admin/user/userData/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Data Failed")}}async function _deleteUserDislikesData(e,t,i,a){t=t+"/admin/user/dislike/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Dislikes Data Failed")}}async function _deleteUserFavoritesData(e,t,i,a){t=t+"/admin/user/favorite/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Favorites Data Failed")}}async function _deleteUserLikesData(e,t,i,a){t=t+"/admin/user/like/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Likes Data Failed")}}async function _deleteUserSavedSearchData(e,t,i,a){t=t+"/admin/user/savedSearch/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Saved Search Data Failed")}}async function _deleteUserSessionData(e,t,i,a){t=t+"/admin/user/userSession/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Session Data Failed")}}async function _deleteUserVideoTrackingData(e,t,i,a,n,o,r,s,l,c,d,p,h,u,f,g,y,w,m){var t=t+"/admin/user/userVideoTracking/delete",v=new Headers,e=(v.append("Content-Type","application/json"),v.append("Authorization","Bearer "+e),{assetId:i,contentId:a,videoTrackingAttribute:n,userId:o,id:r,isFirstQuartile:s,isMidpoint:l,isThirdQuartile:c,isComplete:d,isHidden:p,isLiveStream:h,maxSecond:u,lastSecond:f,totalSeconds:g,lastBeaconDate:y,keyName:w});m&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var _=await fetch(t,{method:"POST",headers:v,body:JSON.stringify(e)});if(!_.ok)throw await _.json()}catch(e){_apiExceptionHandler(e,"Delete User Video Tracking Data Failed")}}async function _deleteUser(e,t,i,a){t=t+"/admin/user/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete User Failed")}}async function _register(e,t,i,a,n,o){var e=e+"/account/register",r=new Headers,i=(r.append("Content-Type","application/json"),{firstName:i,lastName:a,email:t,password:n});o&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(i,null,4));try{var s=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(i)});if(s.ok)return await s.json();throw await s.json()}catch(e){_apiExceptionHandler(e,"Register user failed")}}async function _resendCode(e,t,i){var e=e+"/account/resend-code",a=new Headers,t=(a.append("Content-Type","application/json"),{userName:t});i&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var n=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Resend code failed")}}async function _verify(e,t,i,a){var e=e+"/account/verify",n=new Headers,t=(n.append("Content-Type","application/json"),{userName:t,token:i});a&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var o=await fetch(e,{method:"POST",headers:n,body:JSON.stringify(t)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Verify user failed")}}async function _forgotPassword(e,t,i){var e=e+"/account/forgot-password",a=new Headers,t=(a.append("Content-Type","application/json"),{username:t});i&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var n=await fetch(e,{method:"POST",headers:a,body:JSON.stringify(t)}).catch(e=>{throw e});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Forgot Password Failed")}}async function _login(e,t,i,a){i+="/account/login",e={userName:e,password:t};a&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var n=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Login Failed")}}async function _logout(e,t,i,a){var i=i+"/account/logout",n=new Headers,e=(n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),{userSessionId:t});a&&console.log(`URL: ${i}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(i,{method:"POST",headers:n,body:JSON.stringify(e)});if(!o.ok)throw await o.json()}catch(e){_apiExceptionHandler(e,"Logout Failed")}}async function _refreshToken(e,t,i){var t=t+"/account/refresh-token",a=new Headers,e=(a.append("Content-Type","application/json"),{refreshToken:e});i&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var n=await fetch(t,{method:"POST",headers:a,body:JSON.stringify(e)});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Refreshing Token Failed")}}async function _resetPassword(e,t,i,a,n){var e=e+"/account/reset-password",o=new Headers,t=(o.append("Content-Type","application/json"),{userName:t,TOKEN:i,newPassword:a});n&&console.log(`URL: ${e}
METHOD: POST
BODY: `+JSON.stringify(t,null,4));try{var r=await fetch(e,{method:"POST",headers:o,body:JSON.stringify(t)});if(!r.ok)throw await r.json()}catch(e){_apiExceptionHandler(e,"Reset Password Failed")}}async function _getAssetDetails(e,t,i,a,n){a="admin"===a?t+`/admin/asset/${i}/detail`:t+`/asset/${i}/detail`,t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),n&&console.log(`URL: ${a}
METHOD: GET`);try{var o=await fetch(a,{method:"GET",headers:t});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Get Asset Details Failed")}}async function _ping(e,t,i,a,n){var t=t+"/account/ping",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{userId:a});i&&(e.applicationId=i),n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Ping user failed")}}async function _pingAuth(e,t,i,a,n){var t=t+"/account/ping/auth",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{userId:a});i&&(e.applicationId=i),n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Ping user failed")}}async function _search(e,t,i,a,n,o,r,s,l,c,d,p,h,u){t+=`/${h}/search`,h=new Headers,h.append("Content-Type","application/json"),h.append("Authorization","Bearer "+e),e={};i&&(e.query=i),e.pageOffset=a||0,e.pageSize=n||100,o&&(e.filters=o),r&&(e.sortFields=r),s&&(e.searchResultFields=s),l&&(e.similarAssetId=l),c&&(e.minScore=c),d&&(e.excludeTotalRecordCount=d),p&&(e.filterBinder=p),u&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var f=await fetch(t,{method:"POST",headers:h,body:JSON.stringify(e)});if(f.ok)return await f.json();throw await f.json()}catch(e){_apiExceptionHandler(e,"Search Failed")}}function _apiExceptionHandler(i,a){if(!i)throw new Error(a);if("string"==typeof i)throw new Error(a+": "+i);if(!i.errors)throw new Error(a+": "+i.message);if(Array.isArray(i.errors)){let t="";for(let e=0;e<i.errors.length;e++)t+=`${i.errors[e].code}: ${i.errors[e].field}: ${i.errors[e].message}\n`;throw new Error(a+": "+t)}if("object"==typeof i.errors){let e="";for(var t in i.errors)Object.prototype.hasOwnProperty.call(i.errors,t)&&(e+=`${t}: ${i.errors[t]}\n`);throw new Error(a+": "+e)}}import{getRandomValues}from"crypto";function _newGuid(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,e=>(e^getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16))}function _printDatetime(e){var t=(new Date).toLocaleTimeString();console.log(t+": "+e)}async function _sleep(t){if(t&&0!==t)return new Promise(e=>{setTimeout(()=>{e()},1e3*t)})}function _slugify(e){return e&&0!==e.trim().length?e.toString().normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase().trim().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-"):""}async function _changeEmail(e,t,i,a,n){var t=t+"/account/change-email",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{password:a,newEmail:i});n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(!r.ok)throw await r.json()}catch(e){_apiExceptionHandler(e,"Change email failed")}}async function _changePassword(e,t,i,a,n){var t=t+"/account/change-password",o=new Headers,e=(o.append("Content-Type","application/json"),o.append("Authorization","Bearer "+e),{password:i,newPassword:a});n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var r=await fetch(t,{method:"POST",headers:o,body:JSON.stringify(e)});if(!r.ok)return await r.json()}catch(e){_apiExceptionHandler(e,"Change password failed")}}async function _getCountries(e,t,i){var t=t.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return(await n.json())[5].children;throw await n.json()}catch(e){_apiExceptionHandler(e,"Get countries failed")}}async function _getStates(e,t,i){var t=t.replace(/https:\/\/(.+?)\./,"https://").replace(/\/[^/]+$/,"")+"/config/ea1d7060-6291-46b8-9468-135e7b94021b/lookups.json",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return(await n.json())[6].children;throw await n.json()}catch(e){_apiExceptionHandler(e,"Get countries failed")}}async function _getUser(e,t,i){var t=t+"/account/user",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get user failed")}}async function _updateUser(e,t,i,a,n,o,r,s,l,c,d,p,h,u){var f,g=await _getUser(e,t,u),y=t+"/account/user",w=new Headers,m=(w.append("Content-Type","application/json"),w.append("Authorization","Bearer "+e),{}),v=(await _getCountries(e,t,u)).find(e=>e.label===o),_={address:i,address2:a,city:n,state:(await _getStates(e,t,u)).find(e=>e.label===h).label,country:v,firstName:r,lastName:s,phone:c,phoneExt:d,postalCode:p,organization:l};for(const D in _)null!==_[D]?m[D]=_[D]:null!=(f=g[D])&&(m[D]=f);u&&console.log(`URL: ${y}
METHOD: PUT
BODY: `+JSON.stringify(m,null,4));try{var T=await fetch(y,{method:"PUT",headers:w,body:JSON.stringify(m)});return T.ok||await T.json(),await T.json()}catch(e){_apiExceptionHandler(e,"Update user failed")}}async function _addContentsToContentGroup(e,t,i,a,n){t=t+"/contentgroup/add/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=a;n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Adding Contents to Content Group Failed")}}async function _createContentGroup(e,t,i,a){var t=t+"/contentGroup",n=new Headers,e=(n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),{});i&&(e.name=i),a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Creating Content Group Failed")}}async function _deleteContentGroup(e,t,i,a){t=t+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: DELETE`);try{var n=await fetch(t,{method:"DELETE",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Delete Content Group Failed")}}async function _getContentGroup(e,t,i,a){t=t+"/contentgroup/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Content Group Failed")}}async function _getContentGroups(e,t,i){var t=t+"/contentgroup",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Content Groups Failed")}}async function _getPortalGroups(e,t,i,a){var t=t+"/portal/groups",n=new Headers,e=(n.append("Content-Type","application/json"),n.append("Authorization","Bearer "+e),{returnedGroupNames:i});a&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:n,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Getting Portal Groups Failed")}}async function _removeContentsFromContentGroup(e,t,i,a,n){t=t+"/contentgroup/remove/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=a;n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Removing Content From Content Group Failed")}}async function _renameContentGroup(e,t,i,a,n){t=t+"/contentgroup/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e={Name:a};n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"PATCH",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Renaming Content Group Failed")}}async function _shareContentGroupWithUsers(e,t,i,a,n){t=t+"/contentgroup/share/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=a;n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Sharing Content Group With Users Failed")}}async function _stopSharingContentGroupWithUsers(e,t,i,a,n){t=t+"/contentgroup/stopshare/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=a;n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Stop Sharing Content Group With Users Failed")}}async function _guestInvite(e,t,i,a,n,o,r,s){var t=t+"/account/invite-user",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{contentId:i,contentDefinitionId:a,userId:n,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Guest Invite failed")}}async function _participantPanelQuery(e,t,i,a,n){let o="";o="admin"==i?t+"/admin/user-session/"+a:t+"/user-session/"+a;i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${o}
METHOD: GET`);try{var r=await fetch(o,{method:"GET",headers:i});if(r.ok)return await r.json();throw await r.json()}catch(e){_apiExceptionHandler(e,"Participant panel query failed")}}async function _registerGuest(e,t,i,a,n,o,r){var t=t+"/account/register-guest",s=new Headers,e=(s.append("Content-Type","application/json"),s.append("Authorization","Bearer "+e),{email:i,firstName:a,lastName:n,password:o});r&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var l=await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)});if(l.ok)return await l.json();throw await l.json()}catch(e){_apiExceptionHandler(e,"Register guest failed")}}async function _removeGuest(e,t,i,a,n,o,r,s){var t=t+"/account/remove-user",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{contentId:i,contentDefinitionId:a,userId:n,emails:o,contentSecurityAttribute:r});s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Remove guest failed")}}async function _clearContinueWatching(e,t,i,a,n){var t=t+"/media/clear-watching",o=[],i=(i&&o.push("userId="+i),a&&o.push("assetId="+a),t+=o.length?"?"+o.join("&"):"",new Headers);i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),n&&console.log(`URL: ${t}
METHOD: POST`);try{var r=await fetch(t,{method:"POST",headers:i});if(!r.ok)throw await r.json()}catch(e){_apiExceptionHandler(e,"Clear Continue Watching Failed")}}async function _clearWatchlist(e,t,i,a){t=t+"/media/clear-watchlist?userId="+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: POST`);try{var n=await fetch(t,{method:"POST",headers:i});if(!n.ok)throw await n.json()}catch(e){_apiExceptionHandler(e,"Clear Watchlist Failed")}}async function _createForm(e,t,i,a,n){t=t+"/media/form/"+i,i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),e=a;n&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var o=await fetch(t,{method:"POST",headers:i,body:JSON.stringify(e)});if(o.ok)return await o.json();throw await o.json()}catch(e){_apiExceptionHandler(e,"Creating Form Failed")}}async function _getContentCookies(e,t,i,a){t=t+"/media/set-cookies/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Content Cookies Failed")}}async function _getDefaultSiteConfig(e,t,i){var t=t+"/media/config",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Default Site Config Failed")}}async function _getDynamicContent(e,t,i,a){t=t+"/media/content/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Dynamic Content Failed")}}async function _getDynamicContents(e,t,i){var t=t+"/media/content",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Dynamic Contents Failed")}}async function _getMediaGroup(e,t,i,a){t=t+"/media/group/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Media Group Failed")}}async function _getMediaItem(e,t,i,a){t=t+"/media/item/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Media Item Failed")}}async function _getMyContent(e,t,i){var t=t+"/media/my-content",a=new Headers;a.append("Content-Type","application/json"),a.append("Authorization","Bearer "+e),i&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:a});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get My Content Failed")}}async function _getMyGroup(e,t,i,a){t=t+"/media/my-group/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get My Group Failed")}}async function _getSiteConfig(e,t,i,a){t=t+"/media/config/"+i,i=new Headers;i.append("Content-Type","application/json"),i.append("Authorization","Bearer "+e),a&&console.log(`URL: ${t}
METHOD: GET`);try{var n=await fetch(t,{method:"GET",headers:i});if(n.ok)return await n.json();throw await n.json()}catch(e){_apiExceptionHandler(e,"Get Site Config Failed")}}async function _mediaSearch(e,t,i,a,n,o,r,s){var t=t+"/media/search",l=new Headers,e=(l.append("Content-Type","application/json"),l.append("Authorization","Bearer "+e),{searchQuery:i,ids:a,sortFields:n});e.pageOffset=o||0,e.pageSize=r||100,s&&console.log(`URL: ${t}
METHOD: POST
BODY: `+JSON.stringify(e,null,4));try{var c=await fetch(t,{method:"POST",headers:l,body:JSON.stringify(e)});if(c.ok)return await c.json();throw await c.json()}catch(e){_apiExceptionHandler(e,"Media Search Failed")}}async function _getVideoTracking(e,t,i,a,n,o){let r=t+"/asset/tracking?assetId="+i;t=new Headers;t.append("Content-Type","application/json"),t.append("Authorization","Bearer "+e),a&&(r+="&trackingEvent="+a),n&&(r+="&second="+n),o&&console.log(`URL: ${r}
METHOD: GET`);try{var s=await fetch(r,{method:"GET",headers:t});if(!s.ok)throw await s.json()}catch(e){_apiExceptionHandler(e,"Get Video Tracking Failed")}}